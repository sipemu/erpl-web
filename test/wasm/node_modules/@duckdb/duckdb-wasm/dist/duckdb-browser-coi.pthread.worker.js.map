{
  "version": 3,
  "sources": ["../src/bindings/duckdb-coi.js", "../../js-sha256/src/sha256.js", "../src/bindings/duckdb-coi.pthread.js", "../src/targets/duckdb-browser-coi.pthread.worker.ts", "../src/utils/s3_helper.ts", "../src/bindings/udf_runtime.ts", "../src/bindings/runtime.ts", "../src/bindings/runtime_browser.ts"],
  "sourcesContent": ["var DuckDB = (() => {\n    var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n    if (typeof __filename !== 'undefined') _scriptDir ||= __filename;\n    return (\n        function(moduleArg = {}) {\n\n            function GROWABLE_HEAP_I8() {\n                if (wasmMemory.buffer != HEAP8.buffer) {\n                    updateMemoryViews()\n                }\n                return HEAP8\n            }\n\n            function GROWABLE_HEAP_U8() {\n                if (wasmMemory.buffer != HEAP8.buffer) {\n                    updateMemoryViews()\n                }\n                return HEAPU8\n            }\n\n            function GROWABLE_HEAP_I16() {\n                if (wasmMemory.buffer != HEAP8.buffer) {\n                    updateMemoryViews()\n                }\n                return HEAP16\n            }\n\n            function GROWABLE_HEAP_U16() {\n                if (wasmMemory.buffer != HEAP8.buffer) {\n                    updateMemoryViews()\n                }\n                return HEAPU16\n            }\n\n            function GROWABLE_HEAP_I32() {\n                if (wasmMemory.buffer != HEAP8.buffer) {\n                    updateMemoryViews()\n                }\n                return HEAP32\n            }\n\n            function GROWABLE_HEAP_U32() {\n                if (wasmMemory.buffer != HEAP8.buffer) {\n                    updateMemoryViews()\n                }\n                return HEAPU32\n            }\n\n            function GROWABLE_HEAP_F64() {\n                if (wasmMemory.buffer != HEAP8.buffer) {\n                    updateMemoryViews()\n                }\n                return HEAPF64\n            }\n            var Module = moduleArg;\n            var readyPromiseResolve, readyPromiseReject;\n            Module[\"ready\"] = new Promise((resolve, reject) => {\n                readyPromiseResolve = resolve;\n                readyPromiseReject = reject\n            });\n            var moduleOverrides = Object.assign({}, Module);\n            var arguments_ = [];\n            var thisProgram = \"./this.program\";\n            var quit_ = (status, toThrow) => {\n                throw toThrow\n            };\n            var ENVIRONMENT_IS_WEB = typeof window == \"object\";\n            var ENVIRONMENT_IS_WORKER = typeof importScripts == \"function\";\n            var ENVIRONMENT_IS_NODE = typeof process == \"object\" && typeof process.versions == \"object\" && typeof process.versions.node == \"string\";\n            var ENVIRONMENT_IS_PTHREAD = Module[\"ENVIRONMENT_IS_PTHREAD\"] || false;\n            var scriptDirectory = \"\";\n\n            function locateFile(path) {\n                if (Module[\"locateFile\"]) {\n                    return Module[\"locateFile\"](path, scriptDirectory)\n                }\n                return scriptDirectory + path\n            }\n            var read_, readAsync, readBinary;\n            if (ENVIRONMENT_IS_NODE) {\n                var fs = require(\"fs\");\n                var nodePath = require(\"path\");\n                if (ENVIRONMENT_IS_WORKER) {\n                    scriptDirectory = nodePath.dirname(scriptDirectory) + \"/\"\n                } else {\n                    scriptDirectory = __dirname + \"/\"\n                }\n                read_ = (filename, binary) => {\n                    filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);\n                    return fs.readFileSync(filename, binary ? undefined : \"utf8\")\n                };\n                readBinary = filename => {\n                    var ret = read_(filename, true);\n                    if (!ret.buffer) {\n                        ret = new Uint8Array(ret)\n                    }\n                    return ret\n                };\n                readAsync = (filename, onload, onerror, binary = true) => {\n                    filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);\n                    fs.readFile(filename, binary ? undefined : \"utf8\", (err, data) => {\n                        if (err) onerror(err);\n                        else onload(binary ? data.buffer : data)\n                    })\n                };\n                if (!Module[\"thisProgram\"] && process.argv.length > 1) {\n                    thisProgram = process.argv[1].replace(/\\\\/g, \"/\")\n                }\n                arguments_ = process.argv.slice(2);\n                quit_ = (status, toThrow) => {\n                    process.exitCode = status;\n                    throw toThrow\n                };\n                global.Worker = require(\"worker_threads\").Worker\n            } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n                if (ENVIRONMENT_IS_WORKER) {\n                    scriptDirectory = self.location.href\n                } else if (typeof document != \"undefined\" && document.currentScript) {\n                    scriptDirectory = document.currentScript.src\n                }\n                if (_scriptDir) {\n                    scriptDirectory = _scriptDir\n                }\n                if (scriptDirectory.indexOf(\"blob:\") !== 0) {\n                    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, \"\").lastIndexOf(\"/\") + 1)\n                } else {\n                    scriptDirectory = \"\"\n                }\n                if (!ENVIRONMENT_IS_NODE) {\n                    read_ = url => {\n                        var xhr = new XMLHttpRequest;\n                        xhr.open(\"GET\", url, false);\n                        xhr.send(null);\n                        return xhr.responseText\n                    };\n                    if (ENVIRONMENT_IS_WORKER) {\n                        readBinary = url => {\n                            var xhr = new XMLHttpRequest;\n                            xhr.open(\"GET\", url, false);\n                            xhr.responseType = \"arraybuffer\";\n                            xhr.send(null);\n                            return new Uint8Array(xhr.response)\n                        }\n                    }\n                    readAsync = (url, onload, onerror) => {\n                        var xhr = new XMLHttpRequest;\n                        xhr.open(\"GET\", url, true);\n                        xhr.responseType = \"arraybuffer\";\n                        xhr.onload = () => {\n                            if (xhr.status == 200 || xhr.status == 0 && xhr.response) {\n                                onload(xhr.response);\n                                return\n                            }\n                            onerror()\n                        };\n                        xhr.onerror = onerror;\n                        xhr.send(null)\n                    }\n                }\n            } else {}\n            if (ENVIRONMENT_IS_NODE) {\n                if (typeof performance == \"undefined\") {\n                    global.performance = require(\"perf_hooks\").performance\n                }\n            }\n            var defaultPrint = console.log.bind(console);\n            var defaultPrintErr = console.error.bind(console);\n            if (ENVIRONMENT_IS_NODE) {\n                defaultPrint = (...args) => fs.writeSync(1, args.join(\" \") + \"\\n\");\n                defaultPrintErr = (...args) => fs.writeSync(2, args.join(\" \") + \"\\n\")\n            }\n            var out = Module[\"print\"] || defaultPrint;\n            var err = Module[\"printErr\"] || defaultPrintErr;\n            Object.assign(Module, moduleOverrides);\n            moduleOverrides = null;\n            if (Module[\"arguments\"]) arguments_ = Module[\"arguments\"];\n            if (Module[\"thisProgram\"]) thisProgram = Module[\"thisProgram\"];\n            if (Module[\"quit\"]) quit_ = Module[\"quit\"];\n            var wasmBinary;\n            if (Module[\"wasmBinary\"]) wasmBinary = Module[\"wasmBinary\"];\n            if (typeof WebAssembly != \"object\") {\n                abort(\"no native wasm support detected\")\n            }\n            var wasmMemory;\n            var wasmModule;\n            var ABORT = false;\n            var EXITSTATUS;\n\n            function assert(condition, text) {\n                if (!condition) {\n                    abort(text)\n                }\n            }\n            var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;\n\n            function updateMemoryViews() {\n                var b = wasmMemory.buffer;\n                Module[\"HEAP8\"] = HEAP8 = new Int8Array(b);\n                Module[\"HEAP16\"] = HEAP16 = new Int16Array(b);\n                Module[\"HEAPU8\"] = HEAPU8 = new Uint8Array(b);\n                Module[\"HEAPU16\"] = HEAPU16 = new Uint16Array(b);\n                Module[\"HEAP32\"] = HEAP32 = new Int32Array(b);\n                Module[\"HEAPU32\"] = HEAPU32 = new Uint32Array(b);\n                Module[\"HEAPF32\"] = HEAPF32 = new Float32Array(b);\n                Module[\"HEAPF64\"] = HEAPF64 = new Float64Array(b)\n            }\n            var INITIAL_MEMORY = Module[\"INITIAL_MEMORY\"] || 16777216;\n            if (ENVIRONMENT_IS_PTHREAD) {\n                wasmMemory = Module[\"wasmMemory\"]\n            } else {\n                if (Module[\"wasmMemory\"]) {\n                    wasmMemory = Module[\"wasmMemory\"]\n                } else {\n                    wasmMemory = new WebAssembly.Memory({\n                        \"initial\": INITIAL_MEMORY / 65536,\n                        \"maximum\": 4294967296 / 65536,\n                        \"shared\": true\n                    });\n                    if (!(wasmMemory.buffer instanceof SharedArrayBuffer)) {\n                        err(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\");\n                        if (ENVIRONMENT_IS_NODE) {\n                            err(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\")\n                        }\n                        throw Error(\"bad memory\")\n                    }\n                }\n            }\n            updateMemoryViews();\n            INITIAL_MEMORY = wasmMemory.buffer.byteLength;\n            var __ATPRERUN__ = [];\n            var __ATINIT__ = [];\n            var __ATMAIN__ = [];\n            var __ATPOSTRUN__ = [];\n            var runtimeInitialized = false;\n\n            function preRun() {\n                if (Module[\"preRun\"]) {\n                    if (typeof Module[\"preRun\"] == \"function\") Module[\"preRun\"] = [Module[\"preRun\"]];\n                    while (Module[\"preRun\"].length) {\n                        addOnPreRun(Module[\"preRun\"].shift())\n                    }\n                }\n                callRuntimeCallbacks(__ATPRERUN__)\n            }\n\n            function initRuntime() {\n                runtimeInitialized = true;\n                if (ENVIRONMENT_IS_PTHREAD) return;\n                callRuntimeCallbacks(__ATINIT__)\n            }\n\n            function preMain() {\n                if (ENVIRONMENT_IS_PTHREAD) return;\n                callRuntimeCallbacks(__ATMAIN__)\n            }\n\n            function postRun() {\n                if (ENVIRONMENT_IS_PTHREAD) return;\n                if (Module[\"postRun\"]) {\n                    if (typeof Module[\"postRun\"] == \"function\") Module[\"postRun\"] = [Module[\"postRun\"]];\n                    while (Module[\"postRun\"].length) {\n                        addOnPostRun(Module[\"postRun\"].shift())\n                    }\n                }\n                callRuntimeCallbacks(__ATPOSTRUN__)\n            }\n\n            function addOnPreRun(cb) {\n                __ATPRERUN__.unshift(cb)\n            }\n\n            function addOnInit(cb) {\n                __ATINIT__.unshift(cb)\n            }\n\n            function addOnPostRun(cb) {\n                __ATPOSTRUN__.unshift(cb)\n            }\n            var runDependencies = 0;\n            var runDependencyWatcher = null;\n            var dependenciesFulfilled = null;\n\n            function addRunDependency(id) {\n                runDependencies++;\n                Module[\"monitorRunDependencies\"]?.(runDependencies)\n            }\n\n            function removeRunDependency(id) {\n                runDependencies--;\n                Module[\"monitorRunDependencies\"]?.(runDependencies);\n                if (runDependencies == 0) {\n                    if (runDependencyWatcher !== null) {\n                        clearInterval(runDependencyWatcher);\n                        runDependencyWatcher = null\n                    }\n                    if (dependenciesFulfilled) {\n                        var callback = dependenciesFulfilled;\n                        dependenciesFulfilled = null;\n                        callback()\n                    }\n                }\n            }\n\n            function abort(what) {\n                Module[\"onAbort\"]?.(what);\n                what = \"Aborted(\" + what + \")\";\n                err(what);\n                ABORT = true;\n                EXITSTATUS = 1;\n                what += \". Build with -sASSERTIONS for more info.\";\n                if (runtimeInitialized) {\n                    ___trap()\n                }\n                var e = new WebAssembly.RuntimeError(what);\n                readyPromiseReject(e);\n                throw e\n            }\n            var dataURIPrefix = \"data:application/octet-stream;base64,\";\n            var isDataURI = filename => filename.startsWith(dataURIPrefix);\n            var isFileURI = filename => filename.startsWith(\"file://\");\n            var wasmBinaryFile;\n            wasmBinaryFile = \"./duckdb-coi.wasm\";\n            if (!isDataURI(wasmBinaryFile)) {\n                wasmBinaryFile = locateFile(wasmBinaryFile)\n            }\n\n            function getBinarySync(file) {\n                if (file == wasmBinaryFile && wasmBinary) {\n                    return new Uint8Array(wasmBinary)\n                }\n                if (readBinary) {\n                    return readBinary(file)\n                }\n                throw \"both async and sync fetching of the wasm failed\"\n            }\n\n            function getBinaryPromise(binaryFile) {\n                if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {\n                    if (typeof fetch == \"function\") {\n                        return fetch(binaryFile, {\n                            credentials: \"same-origin\"\n                        }).then(response => {\n                            if (!response[\"ok\"]) {\n                                throw \"failed to load wasm binary file at '\" + binaryFile + \"'\"\n                            }\n                            return response[\"arrayBuffer\"]()\n                        }).catch(() => getBinarySync(binaryFile))\n                    }\n                }\n                return Promise.resolve().then(() => getBinarySync(binaryFile))\n            }\n\n            function instantiateArrayBuffer(binaryFile, imports, receiver) {\n                return getBinaryPromise(binaryFile).then(binary => WebAssembly.instantiate(binary, imports)).then(instance => instance).then(receiver, reason => {\n                    err(`failed to asynchronously prepare wasm: ${reason}`);\n                    abort(reason)\n                })\n            }\n\n            function instantiateAsync(binary, binaryFile, imports, callback) {\n                if (!binary && typeof WebAssembly.instantiateStreaming == \"function\" && !isDataURI(binaryFile) && !ENVIRONMENT_IS_NODE && typeof fetch == \"function\") {\n                    return fetch(binaryFile, {\n                        credentials: \"same-origin\"\n                    }).then(response => {\n                        var result = WebAssembly.instantiateStreaming(response, imports);\n                        return result.then(callback, function(reason) {\n                            err(`wasm streaming compile failed: ${reason}`);\n                            err(\"falling back to ArrayBuffer instantiation\");\n                            return instantiateArrayBuffer(binaryFile, imports, callback)\n                        })\n                    })\n                }\n                return instantiateArrayBuffer(binaryFile, imports, callback)\n            }\n\n            function createWasm() {\n                var info = {\n                    \"a\": wasmImports\n                };\n\n                function receiveInstance(instance, module) {\n                    wasmExports = instance.exports;\n                    wasmExports = applySignatureConversions(wasmExports);\n                    registerTLSInit(wasmExports[\"db\"]);\n                    wasmTable = wasmExports[\"sa\"];\n                    addOnInit(wasmExports[\"qa\"]);\n                    wasmModule = module;\n                    removeRunDependency(\"wasm-instantiate\");\n                    return wasmExports\n                }\n                addRunDependency(\"wasm-instantiate\");\n\n                function receiveInstantiationResult(result) {\n                    receiveInstance(result[\"instance\"], result[\"module\"])\n                }\n                if (Module[\"instantiateWasm\"]) {\n                    try {\n                        return Module[\"instantiateWasm\"](info, receiveInstance)\n                    } catch (e) {\n                        err(`Module.instantiateWasm callback failed with error: ${e}`);\n                        readyPromiseReject(e)\n                    }\n                }\n                instantiateAsync(wasmBinary, wasmBinaryFile, info, receiveInstantiationResult).catch(readyPromiseReject);\n                return {}\n            }\n            var tempDouble;\n            var tempI64;\n\n            function ExitStatus(status) {\n                this.name = \"ExitStatus\";\n                this.message = `Program terminated with exit(${status})`;\n                this.status = status\n            }\n            var terminateWorker = worker => {\n                worker.terminate();\n                worker.onmessage = e => {}\n            };\n            var killThread = pthread_ptr => {\n                var worker = PThread.pthreads[pthread_ptr];\n                delete PThread.pthreads[pthread_ptr];\n                terminateWorker(worker);\n                __emscripten_thread_free_data(pthread_ptr);\n                PThread.runningWorkers.splice(PThread.runningWorkers.indexOf(worker), 1);\n                worker.pthread_ptr = 0\n            };\n            var cancelThread = pthread_ptr => {\n                var worker = PThread.pthreads[pthread_ptr];\n                worker.postMessage({\n                    \"cmd\": \"cancel\"\n                })\n            };\n            var cleanupThread = pthread_ptr => {\n                var worker = PThread.pthreads[pthread_ptr];\n                PThread.returnWorkerToPool(worker)\n            };\n            var zeroMemory = (address, size) => {\n                GROWABLE_HEAP_U8().fill(0, address, address + size);\n                return address\n            };\n            var spawnThread = threadParams => {\n                var worker = PThread.getNewWorker();\n                if (!worker) {\n                    return 6\n                }\n                PThread.runningWorkers.push(worker);\n                PThread.pthreads[threadParams.pthread_ptr] = worker;\n                worker.pthread_ptr = threadParams.pthread_ptr;\n                var msg = {\n                    \"cmd\": \"run\",\n                    \"start_routine\": threadParams.startRoutine,\n                    \"arg\": threadParams.arg,\n                    \"pthread_ptr\": threadParams.pthread_ptr\n                };\n                if (ENVIRONMENT_IS_NODE) {\n                    worker.unref()\n                }\n                worker.postMessage(msg, threadParams.transferList);\n                return 0\n            };\n            var runtimeKeepaliveCounter = 0;\n            var keepRuntimeAlive = () => noExitRuntime || runtimeKeepaliveCounter > 0;\n            var UTF8Decoder = typeof TextDecoder != \"undefined\" ? new TextDecoder(\"utf8\") : undefined;\n            var UTF8ArrayToString = (heapOrArray, idx, maxBytesToRead) => {\n                idx >>>= 0;\n                var endIdx = idx + maxBytesToRead;\n                var endPtr = idx;\n                while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n                if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {\n                    return UTF8Decoder.decode(heapOrArray.buffer instanceof SharedArrayBuffer ? heapOrArray.slice(idx, endPtr) : heapOrArray.subarray(idx, endPtr))\n                }\n                var str = \"\";\n                while (idx < endPtr) {\n                    var u0 = heapOrArray[idx++];\n                    if (!(u0 & 128)) {\n                        str += String.fromCharCode(u0);\n                        continue\n                    }\n                    var u1 = heapOrArray[idx++] & 63;\n                    if ((u0 & 224) == 192) {\n                        str += String.fromCharCode((u0 & 31) << 6 | u1);\n                        continue\n                    }\n                    var u2 = heapOrArray[idx++] & 63;\n                    if ((u0 & 240) == 224) {\n                        u0 = (u0 & 15) << 12 | u1 << 6 | u2\n                    } else {\n                        u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heapOrArray[idx++] & 63\n                    }\n                    if (u0 < 65536) {\n                        str += String.fromCharCode(u0)\n                    } else {\n                        var ch = u0 - 65536;\n                        str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023)\n                    }\n                }\n                return str\n            };\n            var UTF8ToString = (ptr, maxBytesToRead) => {\n                ptr >>>= 0;\n                return ptr ? UTF8ArrayToString(GROWABLE_HEAP_U8(), ptr, maxBytesToRead) : \"\"\n            };\n            var SYSCALLS = {\n                varargs: undefined,\n                get() {\n                    var ret = GROWABLE_HEAP_I32()[+SYSCALLS.varargs >>> 2 >>> 0];\n                    SYSCALLS.varargs += 4;\n                    return ret\n                },\n                getp() {\n                    return SYSCALLS.get()\n                },\n                getStr(ptr) {\n                    var ret = UTF8ToString(ptr);\n                    return ret\n                }\n            };\n            var withStackSave = f => {\n                var stack = stackSave();\n                var ret = f();\n                stackRestore(stack);\n                return ret\n            };\n            var convertI32PairToI53Checked = (lo, hi) => hi + 2097152 >>> 0 < 4194305 - !!lo ? (lo >>> 0) + hi * 4294967296 : NaN;\n            var proxyToMainThread = function(index, sync) {\n                var numCallArgs = arguments.length - 2;\n                var outerArgs = arguments;\n                return withStackSave(() => {\n                    var serializedNumCallArgs = numCallArgs;\n                    var args = stackAlloc(serializedNumCallArgs * 8);\n                    var b = args >>> 3;\n                    for (var i = 0; i < numCallArgs; i++) {\n                        var arg = outerArgs[2 + i];\n                        GROWABLE_HEAP_F64()[b + i >>> 0] = arg\n                    }\n                    return __emscripten_run_on_main_thread_js(index, serializedNumCallArgs, args, sync)\n                })\n            };\n\n            function _proc_exit(code) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(0, 1, code);\n                EXITSTATUS = code;\n                if (!keepRuntimeAlive()) {\n                    PThread.terminateAllThreads();\n                    Module[\"onExit\"]?.(code);\n                    ABORT = true\n                }\n                quit_(code, new ExitStatus(code))\n            }\n            var exitJS = (status, implicit) => {\n                EXITSTATUS = status;\n                if (ENVIRONMENT_IS_PTHREAD) {\n                    exitOnMainThread(status);\n                    throw \"unwind\"\n                }\n                _proc_exit(status)\n            };\n            var _exit = exitJS;\n            var handleException = e => {\n                if (e instanceof ExitStatus || e == \"unwind\") {\n                    return EXITSTATUS\n                }\n                quit_(1, e)\n            };\n            var PThread = {\n                unusedWorkers: [],\n                runningWorkers: [],\n                tlsInitFunctions: [],\n                pthreads: {},\n                init() {\n                    if (ENVIRONMENT_IS_PTHREAD) {\n                        PThread.initWorker()\n                    } else {\n                        PThread.initMainThread()\n                    }\n                },\n                initMainThread() {\n                    var pthreadPoolSize = 4;\n                    while (pthreadPoolSize--) {\n                        PThread.allocateUnusedWorker()\n                    }\n                    addOnPreRun(() => {\n                        addRunDependency(\"loading-workers\");\n                        PThread.loadWasmModuleToAllWorkers(() => removeRunDependency(\"loading-workers\"))\n                    })\n                },\n                initWorker() {\n                    noExitRuntime = false\n                },\n                setExitStatus: status => EXITSTATUS = status,\n                terminateAllThreads__deps: [\"$terminateWorker\"],\n                terminateAllThreads: () => {\n                    for (var worker of PThread.runningWorkers) {\n                        terminateWorker(worker)\n                    }\n                    for (var worker of PThread.unusedWorkers) {\n                        terminateWorker(worker)\n                    }\n                    PThread.unusedWorkers = [];\n                    PThread.runningWorkers = [];\n                    PThread.pthreads = []\n                },\n                returnWorkerToPool: worker => {\n                    var pthread_ptr = worker.pthread_ptr;\n                    delete PThread.pthreads[pthread_ptr];\n                    PThread.unusedWorkers.push(worker);\n                    PThread.runningWorkers.splice(PThread.runningWorkers.indexOf(worker), 1);\n                    worker.pthread_ptr = 0;\n                    __emscripten_thread_free_data(pthread_ptr)\n                },\n                receiveObjectTransfer(data) {},\n                threadInitTLS() {\n                    PThread.tlsInitFunctions.forEach(f => f())\n                },\n                loadWasmModuleToWorker: worker => new Promise(onFinishedLoading => {\n                    worker.onmessage = e => {\n                        var d = e[\"data\"];\n                        var cmd = d[\"cmd\"];\n                        if (d[\"targetThread\"] && d[\"targetThread\"] != _pthread_self()) {\n                            var targetWorker = PThread.pthreads[d[\"targetThread\"]];\n                            if (targetWorker) {\n                                targetWorker.postMessage(d, d[\"transferList\"])\n                            } else {\n                                err(`Internal error! Worker sent a message \"${cmd}\" to target pthread ${d[\"targetThread\"]}, but that thread no longer exists!`)\n                            }\n                            return\n                        }\n                        if (cmd === \"checkMailbox\") {\n                            checkMailbox()\n                        } else if (cmd === \"spawnThread\") {\n                            spawnThread(d)\n                        } else if (cmd === \"cleanupThread\") {\n                            cleanupThread(d[\"thread\"])\n                        } else if (cmd === \"killThread\") {\n                            killThread(d[\"thread\"])\n                        } else if (cmd === \"cancelThread\") {\n                            cancelThread(d[\"thread\"])\n                        } else if (cmd === \"loaded\") {\n                            worker.loaded = true;\n                            if (ENVIRONMENT_IS_NODE && !worker.pthread_ptr) {\n                                worker.unref()\n                            }\n                            onFinishedLoading(worker)\n                        } else if (cmd === \"alert\") {\n                            alert(`Thread ${d[\"threadId\"]}: ${d[\"text\"]}`)\n                        } else if (d.target === \"setimmediate\") {\n                            worker.postMessage(d)\n                        } else if (cmd === \"callHandler\") {\n                            Module[d[\"handler\"]](...d[\"args\"])\n                        } else if (cmd) {\n                            err(`worker sent an unknown command ${cmd}`)\n                        }\n                    };\n                    worker.onerror = e => {\n                        var message = \"worker sent an error!\";\n                        err(`${message} ${e.filename}:${e.lineno}: ${e.message}`);\n                        throw e\n                    };\n                    if (ENVIRONMENT_IS_NODE) {\n                        worker.on(\"message\", data => worker.onmessage({\n                            data: data\n                        }));\n                        worker.on(\"error\", e => worker.onerror(e))\n                    }\n                    var handlers = [];\n                    var knownHandlers = [\"onExit\", \"onAbort\", \"print\", \"printErr\"];\n                    for (var handler of knownHandlers) {\n                        if (Module.hasOwnProperty(handler)) {\n                            handlers.push(handler)\n                        }\n                    }\n                    worker.postMessage({\n                        \"cmd\": \"load\",\n                        \"handlers\": handlers,\n                        \"urlOrBlob\": Module[\"mainScriptUrlOrBlob\"] || _scriptDir,\n                        \"wasmMemory\": wasmMemory,\n                        \"wasmModule\": wasmModule\n                    })\n                }),\n                loadWasmModuleToAllWorkers(onMaybeReady) {\n                    if (ENVIRONMENT_IS_PTHREAD) {\n                        return onMaybeReady()\n                    }\n                    let pthreadPoolReady = Promise.all(PThread.unusedWorkers.map(PThread.loadWasmModuleToWorker));\n                    pthreadPoolReady.then(onMaybeReady)\n                },\n                allocateUnusedWorker() {\n                    var worker;\n                    var pthreadMainJs = locateFile(\"duckdb_wasm.worker.js\");\n                    worker = new Worker(pthreadMainJs);\n                    PThread.unusedWorkers.push(worker)\n                },\n                getNewWorker() {\n                    if (PThread.unusedWorkers.length == 0) {\n                        PThread.allocateUnusedWorker();\n                        PThread.loadWasmModuleToWorker(PThread.unusedWorkers[0])\n                    }\n                    return PThread.unusedWorkers.pop()\n                }\n            };\n            Module[\"PThread\"] = PThread;\n            var callRuntimeCallbacks = callbacks => {\n                while (callbacks.length > 0) {\n                    callbacks.shift()(Module)\n                }\n            };\n            var establishStackSpace = () => {\n                var pthread_ptr = _pthread_self();\n                var stackHigh = GROWABLE_HEAP_U32()[pthread_ptr + 52 >>> 2 >>> 0];\n                var stackSize = GROWABLE_HEAP_U32()[pthread_ptr + 56 >>> 2 >>> 0];\n                var stackLow = stackHigh - stackSize;\n                _emscripten_stack_set_limits(stackHigh, stackLow);\n                stackRestore(stackHigh)\n            };\n            Module[\"establishStackSpace\"] = establishStackSpace;\n\n            function exitOnMainThread(returnCode) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(1, 0, returnCode);\n                _exit(returnCode)\n            }\n            var wasmTableMirror = [];\n            var wasmTable;\n            var getWasmTableEntry = funcPtr => {\n                var func = wasmTableMirror[funcPtr];\n                if (!func) {\n                    if (funcPtr >= wasmTableMirror.length) wasmTableMirror.length = funcPtr + 1;\n                    wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr)\n                }\n                return func\n            };\n            var invokeEntryPoint = (ptr, arg) => {\n                var result = getWasmTableEntry(ptr)(arg);\n\n                function finish(result) {\n                    if (keepRuntimeAlive()) {\n                        PThread.setExitStatus(result)\n                    } else {\n                        __emscripten_thread_exit(result)\n                    }\n                }\n                finish(result)\n            };\n            Module[\"invokeEntryPoint\"] = invokeEntryPoint;\n            var noExitRuntime = Module[\"noExitRuntime\"] || true;\n            var registerTLSInit = tlsInitFunc => PThread.tlsInitFunctions.push(tlsInitFunc);\n\n            function ___emscripten_init_main_thread_js(tb) {\n                tb >>>= 0;\n                __emscripten_thread_init(tb, !ENVIRONMENT_IS_WORKER, 1, !ENVIRONMENT_IS_WEB, 65536, false);\n                PThread.threadInitTLS()\n            }\n\n            function ___emscripten_thread_cleanup(thread) {\n                thread >>>= 0;\n                if (!ENVIRONMENT_IS_PTHREAD) cleanupThread(thread);\n                else postMessage({\n                    \"cmd\": \"cleanupThread\",\n                    \"thread\": thread\n                })\n            }\n\n            function pthreadCreateProxied(pthread_ptr, attr, startRoutine, arg) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(2, 1, pthread_ptr, attr, startRoutine, arg);\n                return ___pthread_create_js(pthread_ptr, attr, startRoutine, arg)\n            }\n\n            function ___pthread_create_js(pthread_ptr, attr, startRoutine, arg) {\n                pthread_ptr >>>= 0;\n                attr >>>= 0;\n                startRoutine >>>= 0;\n                arg >>>= 0;\n                if (typeof SharedArrayBuffer == \"undefined\") {\n                    err(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\");\n                    return 6\n                }\n                var transferList = [];\n                var error = 0;\n                if (ENVIRONMENT_IS_PTHREAD && (transferList.length === 0 || error)) {\n                    return pthreadCreateProxied(pthread_ptr, attr, startRoutine, arg)\n                }\n                if (error) return error;\n                var threadParams = {\n                    startRoutine: startRoutine,\n                    pthread_ptr: pthread_ptr,\n                    arg: arg,\n                    transferList: transferList\n                };\n                if (ENVIRONMENT_IS_PTHREAD) {\n                    threadParams.cmd = \"spawnThread\";\n                    postMessage(threadParams, transferList);\n                    return 0\n                }\n                return spawnThread(threadParams)\n            }\n\n            function ___syscall__newselect(nfds, readfds, writefds, exceptfds, timeout) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(3, 1, nfds, readfds, writefds, exceptfds, timeout);\n                readfds >>>= 0;\n                writefds >>>= 0;\n                exceptfds >>>= 0;\n                timeout >>>= 0;\n                var total = 0;\n                var srcReadLow = readfds ? GROWABLE_HEAP_I32()[readfds >>> 2 >>> 0] : 0,\n                    srcReadHigh = readfds ? GROWABLE_HEAP_I32()[readfds + 4 >>> 2 >>> 0] : 0;\n                var srcWriteLow = writefds ? GROWABLE_HEAP_I32()[writefds >>> 2 >>> 0] : 0,\n                    srcWriteHigh = writefds ? GROWABLE_HEAP_I32()[writefds + 4 >>> 2 >>> 0] : 0;\n                var srcExceptLow = exceptfds ? GROWABLE_HEAP_I32()[exceptfds >>> 2 >>> 0] : 0,\n                    srcExceptHigh = exceptfds ? GROWABLE_HEAP_I32()[exceptfds + 4 >>> 2 >>> 0] : 0;\n                var dstReadLow = 0,\n                    dstReadHigh = 0;\n                var dstWriteLow = 0,\n                    dstWriteHigh = 0;\n                var dstExceptLow = 0,\n                    dstExceptHigh = 0;\n                var allLow = (readfds ? GROWABLE_HEAP_I32()[readfds >>> 2 >>> 0] : 0) | (writefds ? GROWABLE_HEAP_I32()[writefds >>> 2 >>> 0] : 0) | (exceptfds ? GROWABLE_HEAP_I32()[exceptfds >>> 2 >>> 0] : 0);\n                var allHigh = (readfds ? GROWABLE_HEAP_I32()[readfds + 4 >>> 2 >>> 0] : 0) | (writefds ? GROWABLE_HEAP_I32()[writefds + 4 >>> 2 >>> 0] : 0) | (exceptfds ? GROWABLE_HEAP_I32()[exceptfds + 4 >>> 2 >>> 0] : 0);\n                var check = function(fd, low, high, val) {\n                    return fd < 32 ? low & val : high & val\n                };\n                for (var fd = 0; fd < nfds; fd++) {\n                    var mask = 1 << fd % 32;\n                    if (!check(fd, allLow, allHigh, mask)) {\n                        continue\n                    }\n                    var stream = SYSCALLS.getStreamFromFD(fd);\n                    var flags = SYSCALLS.DEFAULT_POLLMASK;\n                    if (stream.stream_ops.poll) {\n                        var timeoutInMillis = -1;\n                        if (timeout) {\n                            var tv_sec = readfds ? GROWABLE_HEAP_I32()[timeout >>> 2 >>> 0] : 0,\n                                tv_usec = readfds ? GROWABLE_HEAP_I32()[timeout + 4 >>> 2 >>> 0] : 0;\n                            timeoutInMillis = (tv_sec + tv_usec / 1e6) * 1e3\n                        }\n                        flags = stream.stream_ops.poll(stream, timeoutInMillis)\n                    }\n                    if (flags & 1 && check(fd, srcReadLow, srcReadHigh, mask)) {\n                        fd < 32 ? dstReadLow = dstReadLow | mask : dstReadHigh = dstReadHigh | mask;\n                        total++\n                    }\n                    if (flags & 4 && check(fd, srcWriteLow, srcWriteHigh, mask)) {\n                        fd < 32 ? dstWriteLow = dstWriteLow | mask : dstWriteHigh = dstWriteHigh | mask;\n                        total++\n                    }\n                    if (flags & 2 && check(fd, srcExceptLow, srcExceptHigh, mask)) {\n                        fd < 32 ? dstExceptLow = dstExceptLow | mask : dstExceptHigh = dstExceptHigh | mask;\n                        total++\n                    }\n                }\n                if (readfds) {\n                    GROWABLE_HEAP_I32()[readfds >>> 2 >>> 0] = dstReadLow;\n                    GROWABLE_HEAP_I32()[readfds + 4 >>> 2 >>> 0] = dstReadHigh\n                }\n                if (writefds) {\n                    GROWABLE_HEAP_I32()[writefds >>> 2 >>> 0] = dstWriteLow;\n                    GROWABLE_HEAP_I32()[writefds + 4 >>> 2 >>> 0] = dstWriteHigh\n                }\n                if (exceptfds) {\n                    GROWABLE_HEAP_I32()[exceptfds >>> 2 >>> 0] = dstExceptLow;\n                    GROWABLE_HEAP_I32()[exceptfds + 4 >>> 2 >>> 0] = dstExceptHigh\n                }\n                return total\n            }\n\n            function SOCKFS() {\n                abort(\"missing function: $SOCKFS\")\n            }\n            SOCKFS.stub = true;\n\n            function FS() {\n                abort(\"missing function: $FS\")\n            }\n            FS.stub = true;\n            var getSocketFromFD = fd => {\n                var socket = SOCKFS.getSocket(fd);\n                if (!socket) throw new FS.ErrnoError(8);\n                return socket\n            };\n            var inetNtop4 = addr => (addr & 255) + \".\" + (addr >> 8 & 255) + \".\" + (addr >> 16 & 255) + \".\" + (addr >> 24 & 255);\n            var inetNtop6 = ints => {\n                var str = \"\";\n                var word = 0;\n                var longest = 0;\n                var lastzero = 0;\n                var zstart = 0;\n                var len = 0;\n                var i = 0;\n                var parts = [ints[0] & 65535, ints[0] >> 16, ints[1] & 65535, ints[1] >> 16, ints[2] & 65535, ints[2] >> 16, ints[3] & 65535, ints[3] >> 16];\n                var hasipv4 = true;\n                var v4part = \"\";\n                for (i = 0; i < 5; i++) {\n                    if (parts[i] !== 0) {\n                        hasipv4 = false;\n                        break\n                    }\n                }\n                if (hasipv4) {\n                    v4part = inetNtop4(parts[6] | parts[7] << 16);\n                    if (parts[5] === -1) {\n                        str = \"::ffff:\";\n                        str += v4part;\n                        return str\n                    }\n                    if (parts[5] === 0) {\n                        str = \"::\";\n                        if (v4part === \"0.0.0.0\") v4part = \"\";\n                        if (v4part === \"0.0.0.1\") v4part = \"1\";\n                        str += v4part;\n                        return str\n                    }\n                }\n                for (word = 0; word < 8; word++) {\n                    if (parts[word] === 0) {\n                        if (word - lastzero > 1) {\n                            len = 0\n                        }\n                        lastzero = word;\n                        len++\n                    }\n                    if (len > longest) {\n                        longest = len;\n                        zstart = word - longest + 1\n                    }\n                }\n                for (word = 0; word < 8; word++) {\n                    if (longest > 1) {\n                        if (parts[word] === 0 && word >= zstart && word < zstart + longest) {\n                            if (word === zstart) {\n                                str += \":\";\n                                if (zstart === 0) str += \":\"\n                            }\n                            continue\n                        }\n                    }\n                    str += Number(_ntohs(parts[word] & 65535)).toString(16);\n                    str += word < 7 ? \":\" : \"\"\n                }\n                return str\n            };\n            var readSockaddr = (sa, salen) => {\n                var family = GROWABLE_HEAP_I16()[sa >>> 1 >>> 0];\n                var port = _ntohs(GROWABLE_HEAP_U16()[sa + 2 >>> 1 >>> 0]);\n                var addr;\n                switch (family) {\n                    case 2:\n                        if (salen !== 16) {\n                            return {\n                                errno: 28\n                            }\n                        }\n                        addr = GROWABLE_HEAP_I32()[sa + 4 >>> 2 >>> 0];\n                        addr = inetNtop4(addr);\n                        break;\n                    case 10:\n                        if (salen !== 28) {\n                            return {\n                                errno: 28\n                            }\n                        }\n                        addr = [GROWABLE_HEAP_I32()[sa + 8 >>> 2 >>> 0], GROWABLE_HEAP_I32()[sa + 12 >>> 2 >>> 0], GROWABLE_HEAP_I32()[sa + 16 >>> 2 >>> 0], GROWABLE_HEAP_I32()[sa + 20 >>> 2 >>> 0]];\n                        addr = inetNtop6(addr);\n                        break;\n                    default:\n                        return {\n                            errno: 5\n                        }\n                }\n                return {\n                    family: family,\n                    addr: addr,\n                    port: port\n                }\n            };\n            var inetPton4 = str => {\n                var b = str.split(\".\");\n                for (var i = 0; i < 4; i++) {\n                    var tmp = Number(b[i]);\n                    if (isNaN(tmp)) return null;\n                    b[i] = tmp\n                }\n                return (b[0] | b[1] << 8 | b[2] << 16 | b[3] << 24) >>> 0\n            };\n            var jstoi_q = str => parseInt(str);\n            var inetPton6 = str => {\n                var words;\n                var w, offset, z;\n                var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\\dA-F]{1,4}:(:|\\b)|){5}|([\\dA-F]{1,4}:){6})((([\\dA-F]{1,4}((?!\\3)::|:\\b|$))|(?!\\2\\3)){2}|(((2[0-4]|1\\d|[1-9])?\\d|25[0-5])\\.?\\b){4})$/i;\n                var parts = [];\n                if (!valid6regx.test(str)) {\n                    return null\n                }\n                if (str === \"::\") {\n                    return [0, 0, 0, 0, 0, 0, 0, 0]\n                }\n                if (str.startsWith(\"::\")) {\n                    str = str.replace(\"::\", \"Z:\")\n                } else {\n                    str = str.replace(\"::\", \":Z:\")\n                }\n                if (str.indexOf(\".\") > 0) {\n                    str = str.replace(new RegExp(\"[.]\", \"g\"), \":\");\n                    words = str.split(\":\");\n                    words[words.length - 4] = jstoi_q(words[words.length - 4]) + jstoi_q(words[words.length - 3]) * 256;\n                    words[words.length - 3] = jstoi_q(words[words.length - 2]) + jstoi_q(words[words.length - 1]) * 256;\n                    words = words.slice(0, words.length - 2)\n                } else {\n                    words = str.split(\":\")\n                }\n                offset = 0;\n                z = 0;\n                for (w = 0; w < words.length; w++) {\n                    if (typeof words[w] == \"string\") {\n                        if (words[w] === \"Z\") {\n                            for (z = 0; z < 8 - words.length + 1; z++) {\n                                parts[w + z] = 0\n                            }\n                            offset = z - 1\n                        } else {\n                            parts[w + offset] = _htons(parseInt(words[w], 16))\n                        }\n                    } else {\n                        parts[w + offset] = words[w]\n                    }\n                }\n                return [parts[1] << 16 | parts[0], parts[3] << 16 | parts[2], parts[5] << 16 | parts[4], parts[7] << 16 | parts[6]]\n            };\n            var DNS = {\n                address_map: {\n                    id: 1,\n                    addrs: {},\n                    names: {}\n                },\n                lookup_name(name) {\n                    var res = inetPton4(name);\n                    if (res !== null) {\n                        return name\n                    }\n                    res = inetPton6(name);\n                    if (res !== null) {\n                        return name\n                    }\n                    var addr;\n                    if (DNS.address_map.addrs[name]) {\n                        addr = DNS.address_map.addrs[name]\n                    } else {\n                        var id = DNS.address_map.id++;\n                        assert(id < 65535, \"exceeded max address mappings of 65535\");\n                        addr = \"172.29.\" + (id & 255) + \".\" + (id & 65280);\n                        DNS.address_map.names[addr] = name;\n                        DNS.address_map.addrs[name] = addr\n                    }\n                    return addr\n                },\n                lookup_addr(addr) {\n                    if (DNS.address_map.names[addr]) {\n                        return DNS.address_map.names[addr]\n                    }\n                    return null\n                }\n            };\n            var getSocketAddress = (addrp, addrlen, allowNull) => {\n                if (allowNull && addrp === 0) return null;\n                var info = readSockaddr(addrp, addrlen);\n                if (info.errno) throw new FS.ErrnoError(info.errno);\n                info.addr = DNS.lookup_addr(info.addr) || info.addr;\n                return info\n            };\n\n            function ___syscall_bind(fd, addr, addrlen, d1, d2, d3) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(4, 1, fd, addr, addrlen, d1, d2, d3);\n                addr >>>= 0;\n                addrlen >>>= 0;\n                var sock = getSocketFromFD(fd);\n                var info = getSocketAddress(addr, addrlen);\n                sock.sock_ops.bind(sock, info.addr, info.port);\n                return 0\n            }\n\n            function ___syscall_connect(fd, addr, addrlen, d1, d2, d3) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(5, 1, fd, addr, addrlen, d1, d2, d3);\n                addr >>>= 0;\n                addrlen >>>= 0;\n                var sock = getSocketFromFD(fd);\n                var info = getSocketAddress(addr, addrlen);\n                sock.sock_ops.connect(sock, info.addr, info.port);\n                return 0\n            }\n\n            function ___syscall_faccessat(dirfd, path, amode, flags) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(6, 1, dirfd, path, amode, flags);\n                path >>>= 0\n            }\n\n            function ___syscall_fcntl64(fd, cmd, varargs) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(7, 1, fd, cmd, varargs);\n                varargs >>>= 0;\n                SYSCALLS.varargs = varargs;\n                return 0\n            }\n\n            function ___syscall_fstat64(fd, buf) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(8, 1, fd, buf);\n                buf >>>= 0\n            }\n\n            function ___syscall_ftruncate64(fd, length_low, length_high) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(9, 1, fd, length_low, length_high);\n                var length = convertI32PairToI53Checked(length_low, length_high)\n            }\n            var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => {\n                outIdx >>>= 0;\n                if (!(maxBytesToWrite > 0)) return 0;\n                var startIdx = outIdx;\n                var endIdx = outIdx + maxBytesToWrite - 1;\n                for (var i = 0; i < str.length; ++i) {\n                    var u = str.charCodeAt(i);\n                    if (u >= 55296 && u <= 57343) {\n                        var u1 = str.charCodeAt(++i);\n                        u = 65536 + ((u & 1023) << 10) | u1 & 1023\n                    }\n                    if (u <= 127) {\n                        if (outIdx >= endIdx) break;\n                        heap[outIdx++ >>> 0] = u\n                    } else if (u <= 2047) {\n                        if (outIdx + 1 >= endIdx) break;\n                        heap[outIdx++ >>> 0] = 192 | u >> 6;\n                        heap[outIdx++ >>> 0] = 128 | u & 63\n                    } else if (u <= 65535) {\n                        if (outIdx + 2 >= endIdx) break;\n                        heap[outIdx++ >>> 0] = 224 | u >> 12;\n                        heap[outIdx++ >>> 0] = 128 | u >> 6 & 63;\n                        heap[outIdx++ >>> 0] = 128 | u & 63\n                    } else {\n                        if (outIdx + 3 >= endIdx) break;\n                        heap[outIdx++ >>> 0] = 240 | u >> 18;\n                        heap[outIdx++ >>> 0] = 128 | u >> 12 & 63;\n                        heap[outIdx++ >>> 0] = 128 | u >> 6 & 63;\n                        heap[outIdx++ >>> 0] = 128 | u & 63\n                    }\n                }\n                heap[outIdx >>> 0] = 0;\n                return outIdx - startIdx\n            };\n            var stringToUTF8 = (str, outPtr, maxBytesToWrite) => stringToUTF8Array(str, GROWABLE_HEAP_U8(), outPtr, maxBytesToWrite);\n\n            function ___syscall_getdents64(fd, dirp, count) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(10, 1, fd, dirp, count);\n                dirp >>>= 0;\n                count >>>= 0\n            }\n            var writeSockaddr = (sa, family, addr, port, addrlen) => {\n                switch (family) {\n                    case 2:\n                        addr = inetPton4(addr);\n                        zeroMemory(sa, 16);\n                        if (addrlen) {\n                            GROWABLE_HEAP_I32()[addrlen >>> 2 >>> 0] = 16\n                        }\n                        GROWABLE_HEAP_I16()[sa >>> 1 >>> 0] = family;\n                        GROWABLE_HEAP_I32()[sa + 4 >>> 2 >>> 0] = addr;\n                        GROWABLE_HEAP_I16()[sa + 2 >>> 1 >>> 0] = _htons(port);\n                        break;\n                    case 10:\n                        addr = inetPton6(addr);\n                        zeroMemory(sa, 28);\n                        if (addrlen) {\n                            GROWABLE_HEAP_I32()[addrlen >>> 2 >>> 0] = 28\n                        }\n                        GROWABLE_HEAP_I32()[sa >>> 2 >>> 0] = family;\n                        GROWABLE_HEAP_I32()[sa + 8 >>> 2 >>> 0] = addr[0];\n                        GROWABLE_HEAP_I32()[sa + 12 >>> 2 >>> 0] = addr[1];\n                        GROWABLE_HEAP_I32()[sa + 16 >>> 2 >>> 0] = addr[2];\n                        GROWABLE_HEAP_I32()[sa + 20 >>> 2 >>> 0] = addr[3];\n                        GROWABLE_HEAP_I16()[sa + 2 >>> 1 >>> 0] = _htons(port);\n                        break;\n                    default:\n                        return 5\n                }\n                return 0\n            };\n\n            function ___syscall_getpeername(fd, addr, addrlen, d1, d2, d3) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(11, 1, fd, addr, addrlen, d1, d2, d3);\n                addr >>>= 0;\n                addrlen >>>= 0;\n                var sock = getSocketFromFD(fd);\n                if (!sock.daddr) {\n                    return -53\n                }\n                var errno = writeSockaddr(addr, sock.family, DNS.lookup_name(sock.daddr), sock.dport, addrlen);\n                return 0\n            }\n\n            function ___syscall_getsockopt(fd, level, optname, optval, optlen, d1) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(12, 1, fd, level, optname, optval, optlen, d1);\n                optval >>>= 0;\n                optlen >>>= 0;\n                var sock = getSocketFromFD(fd);\n                if (level === 1) {\n                    if (optname === 4) {\n                        GROWABLE_HEAP_I32()[optval >>> 2 >>> 0] = sock.error;\n                        GROWABLE_HEAP_I32()[optlen >>> 2 >>> 0] = 4;\n                        sock.error = null;\n                        return 0\n                    }\n                }\n                return -50\n            }\n\n            function ___syscall_ioctl(fd, op, varargs) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(13, 1, fd, op, varargs);\n                varargs >>>= 0;\n                SYSCALLS.varargs = varargs;\n                return 0\n            }\n\n            function ___syscall_lstat64(path, buf) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(14, 1, path, buf);\n                path >>>= 0;\n                buf >>>= 0\n            }\n\n            function ___syscall_mkdirat(dirfd, path, mode) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(15, 1, dirfd, path, mode);\n                path >>>= 0\n            }\n\n            function ___syscall_newfstatat(dirfd, path, buf, flags) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(16, 1, dirfd, path, buf, flags);\n                path >>>= 0;\n                buf >>>= 0\n            }\n\n            function ___syscall_openat(dirfd, path, flags, varargs) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(17, 1, dirfd, path, flags, varargs);\n                path >>>= 0;\n                varargs >>>= 0;\n                SYSCALLS.varargs = varargs\n            }\n\n            function ___syscall_recvfrom(fd, buf, len, flags, addr, addrlen) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(18, 1, fd, buf, len, flags, addr, addrlen);\n                buf >>>= 0;\n                len >>>= 0;\n                addr >>>= 0;\n                addrlen >>>= 0;\n                var sock = getSocketFromFD(fd);\n                var msg = sock.sock_ops.recvmsg(sock, len);\n                if (!msg) return 0;\n                if (addr) {\n                    var errno = writeSockaddr(addr, sock.family, DNS.lookup_name(msg.addr), msg.port, addrlen)\n                }\n                GROWABLE_HEAP_U8().set(msg.buffer, buf >>> 0);\n                return msg.buffer.byteLength\n            }\n\n            function ___syscall_renameat(olddirfd, oldpath, newdirfd, newpath) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(19, 1, olddirfd, oldpath, newdirfd, newpath);\n                oldpath >>>= 0;\n                newpath >>>= 0\n            }\n\n            function ___syscall_rmdir(path) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(20, 1, path);\n                path >>>= 0\n            }\n\n            function ___syscall_sendto(fd, message, length, flags, addr, addr_len) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(21, 1, fd, message, length, flags, addr, addr_len);\n                message >>>= 0;\n                length >>>= 0;\n                addr >>>= 0;\n                addr_len >>>= 0\n            }\n\n            function ___syscall_socket(domain, type, protocol) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(22, 1, domain, type, protocol)\n            }\n\n            function ___syscall_stat64(path, buf) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(23, 1, path, buf);\n                path >>>= 0;\n                buf >>>= 0\n            }\n\n            function ___syscall_unlinkat(dirfd, path, flags) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(24, 1, dirfd, path, flags);\n                path >>>= 0\n            }\n            var nowIsMonotonic = 1;\n            var __emscripten_get_now_is_monotonic = () => nowIsMonotonic;\n            var maybeExit = () => {\n                if (!keepRuntimeAlive()) {\n                    try {\n                        if (ENVIRONMENT_IS_PTHREAD) __emscripten_thread_exit(EXITSTATUS);\n                        else _exit(EXITSTATUS)\n                    } catch (e) {\n                        handleException(e)\n                    }\n                }\n            };\n            var callUserCallback = func => {\n                if (ABORT) {\n                    return\n                }\n                try {\n                    func();\n                    maybeExit()\n                } catch (e) {\n                    handleException(e)\n                }\n            };\n\n            function __emscripten_thread_mailbox_await(pthread_ptr) {\n                pthread_ptr >>>= 0;\n                if (typeof Atomics.waitAsync === \"function\") {\n                    var wait = Atomics.waitAsync(GROWABLE_HEAP_I32(), pthread_ptr >>> 2, pthread_ptr);\n                    wait.value.then(checkMailbox);\n                    var waitingAsync = pthread_ptr + 128;\n                    Atomics.store(GROWABLE_HEAP_I32(), waitingAsync >>> 2, 1)\n                }\n            }\n            Module[\"__emscripten_thread_mailbox_await\"] = __emscripten_thread_mailbox_await;\n            var checkMailbox = () => {\n                var pthread_ptr = _pthread_self();\n                if (pthread_ptr) {\n                    __emscripten_thread_mailbox_await(pthread_ptr);\n                    callUserCallback(__emscripten_check_mailbox)\n                }\n            };\n            Module[\"checkMailbox\"] = checkMailbox;\n\n            function __emscripten_notify_mailbox_postmessage(targetThreadId, currThreadId, mainThreadId) {\n                targetThreadId >>>= 0;\n                currThreadId >>>= 0;\n                mainThreadId >>>= 0;\n                if (targetThreadId == currThreadId) {\n                    setTimeout(checkMailbox)\n                } else if (ENVIRONMENT_IS_PTHREAD) {\n                    postMessage({\n                        \"targetThread\": targetThreadId,\n                        \"cmd\": \"checkMailbox\"\n                    })\n                } else {\n                    var worker = PThread.pthreads[targetThreadId];\n                    if (!worker) {\n                        return\n                    }\n                    worker.postMessage({\n                        \"cmd\": \"checkMailbox\"\n                    })\n                }\n            }\n            var proxiedJSCallArgs = [];\n\n            function __emscripten_receive_on_main_thread_js(index, callingThread, numCallArgs, args) {\n                callingThread >>>= 0;\n                args >>>= 0;\n                proxiedJSCallArgs.length = numCallArgs;\n                var b = args >>> 3;\n                for (var i = 0; i < numCallArgs; i++) {\n                    proxiedJSCallArgs[i] = GROWABLE_HEAP_F64()[b + i >>> 0]\n                }\n                var func = proxiedFunctionTable[index];\n                PThread.currentProxiedOperationCallerThread = callingThread;\n                var rtn = func.apply(null, proxiedJSCallArgs);\n                PThread.currentProxiedOperationCallerThread = 0;\n                return rtn\n            }\n\n            function __emscripten_thread_set_strongref(thread) {\n                thread >>>= 0;\n                if (ENVIRONMENT_IS_NODE) {\n                    PThread.pthreads[thread].ref()\n                }\n            }\n            var _abort = () => {\n                abort(\"\")\n            };\n\n            function _duckdb_web_fs_directory_create(path, pathLen) {\n                path >>>= 0;\n                return globalThis.DUCKDB_RUNTIME.createDirectory(Module, path, pathLen)\n            }\n\n            function _duckdb_web_fs_directory_exists(path, pathLen) {\n                path >>>= 0;\n                return globalThis.DUCKDB_RUNTIME.checkDirectory(Module, path, pathLen)\n            }\n\n            function _duckdb_web_fs_directory_list_files(path, pathLen) {\n                path >>>= 0;\n                return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(Module, path, pathLen)\n            }\n\n            function _duckdb_web_fs_directory_remove(path, pathLen) {\n                path >>>= 0;\n                return globalThis.DUCKDB_RUNTIME.removeDirectory(Module, path, pathLen)\n            }\n\n            function _duckdb_web_fs_file_close(fileId) {\n                return globalThis.DUCKDB_RUNTIME.closeFile(Module, fileId)\n            }\n\n            function _duckdb_web_fs_file_exists(path, pathLen) {\n                path >>>= 0;\n                return globalThis.DUCKDB_RUNTIME.checkFile(Module, path, pathLen)\n            }\n\n            function _duckdb_web_fs_file_get_last_modified_time(fileId) {\n                return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(Module, fileId)\n            }\n\n            function _duckdb_web_fs_file_move(from, fromLen, to, toLen) {\n                from >>>= 0;\n                to >>>= 0;\n                return globalThis.DUCKDB_RUNTIME.moveFile(Module, from, fromLen, to, toLen)\n            }\n\n            function _duckdb_web_fs_file_open(fileId, flags) {\n                return globalThis.DUCKDB_RUNTIME.openFile(Module, fileId, flags)\n            }\n\n            function _duckdb_web_fs_file_read(fileId, buf, size, location) {\n                buf >>>= 0;\n                return globalThis.DUCKDB_RUNTIME.readFile(Module, fileId, buf, size, location)\n            }\n\n            function _duckdb_web_fs_file_truncate(fileId, newSize) {\n                return globalThis.DUCKDB_RUNTIME.truncateFile(Module, fileId, newSize)\n            }\n\n            function _duckdb_web_fs_file_write(fileId, buf, size, location) {\n                buf >>>= 0;\n                return globalThis.DUCKDB_RUNTIME.writeFile(Module, fileId, buf, size, location)\n            }\n\n            function _duckdb_web_fs_get_default_data_protocol(Module) {\n                return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(Module)\n            }\n\n            function _duckdb_web_fs_glob(path, pathLen) {\n                path >>>= 0;\n                return globalThis.DUCKDB_RUNTIME.glob(Module, path, pathLen)\n            }\n\n            function _duckdb_web_test_platform_feature(feature) {\n                return globalThis.DUCKDB_RUNTIME.testPlatformFeature(Module, feature)\n            }\n\n            function _duckdb_web_udf_scalar_call(funcId, descPtr, descSize, ptrsPtr, ptrsSize, response) {\n                funcId >>>= 0;\n                descSize >>>= 0;\n                ptrsSize >>>= 0;\n                return globalThis.DUCKDB_RUNTIME.callScalarUDF(Module, funcId, descPtr, descSize, ptrsPtr, ptrsSize, response)\n            }\n            var warnOnce = text => {\n                warnOnce.shown ||= {};\n                if (!warnOnce.shown[text]) {\n                    warnOnce.shown[text] = 1;\n                    if (ENVIRONMENT_IS_NODE) text = \"warning: \" + text;\n                    err(text)\n                }\n            };\n            var _emscripten_check_blocking_allowed = () => {};\n            var _emscripten_date_now = () => Date.now();\n            var runtimeKeepalivePush = () => {\n                runtimeKeepaliveCounter += 1\n            };\n            var _emscripten_exit_with_live_runtime = () => {\n                runtimeKeepalivePush();\n                throw \"unwind\"\n            };\n            var getHeapMax = () => 4294901760;\n\n            function _emscripten_get_heap_max() {\n                return getHeapMax()\n            }\n            var _emscripten_get_now;\n            _emscripten_get_now = () => performance.timeOrigin + performance.now();\n            var _emscripten_num_logical_cores = () => ENVIRONMENT_IS_NODE ? require(\"os\").cpus().length : navigator[\"hardwareConcurrency\"];\n            var growMemory = size => {\n                var b = wasmMemory.buffer;\n                var pages = (size - b.byteLength + 65535) / 65536;\n                try {\n                    wasmMemory.grow(pages);\n                    updateMemoryViews();\n                    return 1\n                } catch (e) {}\n            };\n\n            function _emscripten_resize_heap(requestedSize) {\n                requestedSize >>>= 0;\n                var oldSize = GROWABLE_HEAP_U8().length;\n                if (requestedSize <= oldSize) {\n                    return false\n                }\n                var maxHeapSize = getHeapMax();\n                if (requestedSize > maxHeapSize) {\n                    return false\n                }\n                var alignUp = (x, multiple) => x + (multiple - x % multiple) % multiple;\n                for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {\n                    var overGrownHeapSize = oldSize * (1 + .2 / cutDown);\n                    overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);\n                    var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));\n                    var replacement = growMemory(newSize);\n                    if (replacement) {\n                        return true\n                    }\n                }\n                return false\n            }\n            var ENV = {};\n            var getExecutableName = () => thisProgram || \"./this.program\";\n            var getEnvStrings = () => {\n                if (!getEnvStrings.strings) {\n                    var lang = (typeof navigator == \"object\" && navigator.languages && navigator.languages[0] || \"C\").replace(\"-\", \"_\") + \".UTF-8\";\n                    var env = {\n                        \"USER\": \"web_user\",\n                        \"LOGNAME\": \"web_user\",\n                        \"PATH\": \"/\",\n                        \"PWD\": \"/\",\n                        \"HOME\": \"/home/web_user\",\n                        \"LANG\": lang,\n                        \"_\": getExecutableName()\n                    };\n                    for (var x in ENV) {\n                        if (ENV[x] === undefined) delete env[x];\n                        else env[x] = ENV[x]\n                    }\n                    var strings = [];\n                    for (var x in env) {\n                        strings.push(`${x}=${env[x]}`)\n                    }\n                    getEnvStrings.strings = strings\n                }\n                return getEnvStrings.strings\n            };\n            var stringToAscii = (str, buffer) => {\n                for (var i = 0; i < str.length; ++i) {\n                    GROWABLE_HEAP_I8()[buffer++ >>> 0 >>> 0] = str.charCodeAt(i)\n                }\n                GROWABLE_HEAP_I8()[buffer >>> 0 >>> 0] = 0\n            };\n            var _environ_get = function(__environ, environ_buf) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(25, 1, __environ, environ_buf);\n                __environ >>>= 0;\n                environ_buf >>>= 0;\n                var bufSize = 0;\n                getEnvStrings().forEach((string, i) => {\n                    var ptr = environ_buf + bufSize;\n                    GROWABLE_HEAP_U32()[__environ + i * 4 >>> 2 >>> 0] = ptr;\n                    stringToAscii(string, ptr);\n                    bufSize += string.length + 1\n                });\n                return 0\n            };\n            var _environ_sizes_get = function(penviron_count, penviron_buf_size) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(26, 1, penviron_count, penviron_buf_size);\n                penviron_count >>>= 0;\n                penviron_buf_size >>>= 0;\n                var strings = getEnvStrings();\n                GROWABLE_HEAP_U32()[penviron_count >>> 2 >>> 0] = strings.length;\n                var bufSize = 0;\n                strings.forEach(string => bufSize += string.length + 1);\n                GROWABLE_HEAP_U32()[penviron_buf_size >>> 2 >>> 0] = bufSize;\n                return 0\n            };\n\n            function _fd_close(fd) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(27, 1, fd);\n                return 52\n            }\n\n            function _fd_fdstat_get(fd, pbuf) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(28, 1, fd, pbuf);\n                pbuf >>>= 0;\n                var rightsBase = 0;\n                var rightsInheriting = 0;\n                var flags = 0;\n                {\n                    var type = 2;\n                    if (fd == 0) {\n                        rightsBase = 2\n                    } else if (fd == 1 || fd == 2) {\n                        rightsBase = 64\n                    }\n                    flags = 1\n                }\n                GROWABLE_HEAP_I8()[pbuf >>> 0 >>> 0] = type;\n                GROWABLE_HEAP_I16()[pbuf + 2 >>> 1 >>> 0] = flags;\n                tempI64 = [rightsBase >>> 0, (tempDouble = rightsBase, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], GROWABLE_HEAP_I32()[pbuf + 8 >>> 2 >>> 0] = tempI64[0], GROWABLE_HEAP_I32()[pbuf + 12 >>> 2 >>> 0] = tempI64[1];\n                tempI64 = [rightsInheriting >>> 0, (tempDouble = rightsInheriting, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], GROWABLE_HEAP_I32()[pbuf + 16 >>> 2 >>> 0] = tempI64[0], GROWABLE_HEAP_I32()[pbuf + 20 >>> 2 >>> 0] = tempI64[1];\n                return 0\n            }\n\n            function _fd_pread(fd, iov, iovcnt, offset_low, offset_high, pnum) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(29, 1, fd, iov, iovcnt, offset_low, offset_high, pnum);\n                iov >>>= 0;\n                iovcnt >>>= 0;\n                var offset = convertI32PairToI53Checked(offset_low, offset_high);\n                pnum >>>= 0;\n                return 52\n            }\n\n            function _fd_pwrite(fd, iov, iovcnt, offset_low, offset_high, pnum) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(30, 1, fd, iov, iovcnt, offset_low, offset_high, pnum);\n                iov >>>= 0;\n                iovcnt >>>= 0;\n                var offset = convertI32PairToI53Checked(offset_low, offset_high);\n                pnum >>>= 0;\n                return 52\n            }\n\n            function _fd_read(fd, iov, iovcnt, pnum) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(31, 1, fd, iov, iovcnt, pnum);\n                iov >>>= 0;\n                iovcnt >>>= 0;\n                pnum >>>= 0;\n                return 52\n            }\n\n            function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(32, 1, fd, offset_low, offset_high, whence, newOffset);\n                var offset = convertI32PairToI53Checked(offset_low, offset_high);\n                newOffset >>>= 0;\n                return 70\n            }\n\n            function _fd_sync(fd) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(33, 1, fd);\n                return 52\n            }\n            var printCharBuffers = [null, [],\n                []\n            ];\n            var printChar = (stream, curr) => {\n                var buffer = printCharBuffers[stream];\n                if (curr === 0 || curr === 10) {\n                    (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));\n                    buffer.length = 0\n                } else {\n                    buffer.push(curr)\n                }\n            };\n\n            function _fd_write(fd, iov, iovcnt, pnum) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(34, 1, fd, iov, iovcnt, pnum);\n                iov >>>= 0;\n                iovcnt >>>= 0;\n                pnum >>>= 0;\n                var num = 0;\n                for (var i = 0; i < iovcnt; i++) {\n                    var ptr = GROWABLE_HEAP_U32()[iov >>> 2 >>> 0];\n                    var len = GROWABLE_HEAP_U32()[iov + 4 >>> 2 >>> 0];\n                    iov += 8;\n                    for (var j = 0; j < len; j++) {\n                        printChar(fd, GROWABLE_HEAP_U8()[ptr + j >>> 0])\n                    }\n                    num += len\n                }\n                GROWABLE_HEAP_U32()[pnum >>> 2 >>> 0] = num;\n                return 0\n            }\n\n            function _getaddrinfo(node, service, hint, out) {\n                if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(35, 1, node, service, hint, out);\n                node >>>= 0;\n                service >>>= 0;\n                hint >>>= 0;\n                out >>>= 0;\n                var addr = 0;\n                var port = 0;\n                var flags = 0;\n                var family = 0;\n                var type = 0;\n                var proto = 0;\n                var ai;\n\n                function allocaddrinfo(family, type, proto, canon, addr, port) {\n                    var sa, salen, ai;\n                    var errno;\n                    salen = family === 10 ? 28 : 16;\n                    addr = family === 10 ? inetNtop6(addr) : inetNtop4(addr);\n                    sa = _malloc(salen);\n                    errno = writeSockaddr(sa, family, addr, port);\n                    assert(!errno);\n                    ai = _malloc(32);\n                    GROWABLE_HEAP_I32()[ai + 4 >>> 2 >>> 0] = family;\n                    GROWABLE_HEAP_I32()[ai + 8 >>> 2 >>> 0] = type;\n                    GROWABLE_HEAP_I32()[ai + 12 >>> 2 >>> 0] = proto;\n                    GROWABLE_HEAP_U32()[ai + 24 >>> 2 >>> 0] = canon;\n                    GROWABLE_HEAP_U32()[ai + 20 >>> 2 >>> 0] = sa;\n                    if (family === 10) {\n                        GROWABLE_HEAP_I32()[ai + 16 >>> 2 >>> 0] = 28\n                    } else {\n                        GROWABLE_HEAP_I32()[ai + 16 >>> 2 >>> 0] = 16\n                    }\n                    GROWABLE_HEAP_I32()[ai + 28 >>> 2 >>> 0] = 0;\n                    return ai\n                }\n                if (hint) {\n                    flags = GROWABLE_HEAP_I32()[hint >>> 2 >>> 0];\n                    family = GROWABLE_HEAP_I32()[hint + 4 >>> 2 >>> 0];\n                    type = GROWABLE_HEAP_I32()[hint + 8 >>> 2 >>> 0];\n                    proto = GROWABLE_HEAP_I32()[hint + 12 >>> 2 >>> 0]\n                }\n                if (type && !proto) {\n                    proto = type === 2 ? 17 : 6\n                }\n                if (!type && proto) {\n                    type = proto === 17 ? 2 : 1\n                }\n                if (proto === 0) {\n                    proto = 6\n                }\n                if (type === 0) {\n                    type = 1\n                }\n                if (!node && !service) {\n                    return -2\n                }\n                if (flags & ~(1 | 2 | 4 | 1024 | 8 | 16 | 32)) {\n                    return -1\n                }\n                if (hint !== 0 && GROWABLE_HEAP_I32()[hint >>> 2 >>> 0] & 2 && !node) {\n                    return -1\n                }\n                if (flags & 32) {\n                    return -2\n                }\n                if (type !== 0 && type !== 1 && type !== 2) {\n                    return -7\n                }\n                if (family !== 0 && family !== 2 && family !== 10) {\n                    return -6\n                }\n                if (service) {\n                    service = UTF8ToString(service);\n                    port = parseInt(service, 10);\n                    if (isNaN(port)) {\n                        if (flags & 1024) {\n                            return -2\n                        }\n                        return -8\n                    }\n                }\n                if (!node) {\n                    if (family === 0) {\n                        family = 2\n                    }\n                    if ((flags & 1) === 0) {\n                        if (family === 2) {\n                            addr = _htonl(2130706433)\n                        } else {\n                            addr = [0, 0, 0, 1]\n                        }\n                    }\n                    ai = allocaddrinfo(family, type, proto, null, addr, port);\n                    GROWABLE_HEAP_U32()[out >>> 2 >>> 0] = ai;\n                    return 0\n                }\n                node = UTF8ToString(node);\n                addr = inetPton4(node);\n                if (addr !== null) {\n                    if (family === 0 || family === 2) {\n                        family = 2\n                    } else if (family === 10 && flags & 8) {\n                        addr = [0, 0, _htonl(65535), addr];\n                        family = 10\n                    } else {\n                        return -2\n                    }\n                } else {\n                    addr = inetPton6(node);\n                    if (addr !== null) {\n                        if (family === 0 || family === 10) {\n                            family = 10\n                        } else {\n                            return -2\n                        }\n                    }\n                }\n                if (addr != null) {\n                    ai = allocaddrinfo(family, type, proto, node, addr, port);\n                    GROWABLE_HEAP_U32()[out >>> 2 >>> 0] = ai;\n                    return 0\n                }\n                if (flags & 4) {\n                    return -2\n                }\n                node = DNS.lookup_name(node);\n                addr = inetPton4(node);\n                if (family === 0) {\n                    family = 2\n                } else if (family === 10) {\n                    addr = [0, 0, _htonl(65535), addr]\n                }\n                ai = allocaddrinfo(family, type, proto, null, addr, port);\n                GROWABLE_HEAP_U32()[out >>> 2 >>> 0] = ai;\n                return 0\n            }\n            var initRandomFill = () => {\n                if (typeof crypto == \"object\" && typeof crypto[\"getRandomValues\"] == \"function\") {\n                    return view => (view.set(crypto.getRandomValues(new Uint8Array(view.byteLength))), view)\n                } else if (ENVIRONMENT_IS_NODE) {\n                    try {\n                        var crypto_module = require(\"crypto\");\n                        var randomFillSync = crypto_module[\"randomFillSync\"];\n                        if (randomFillSync) {\n                            return view => crypto_module[\"randomFillSync\"](view)\n                        }\n                        var randomBytes = crypto_module[\"randomBytes\"];\n                        return view => (view.set(randomBytes(view.byteLength)), view)\n                    } catch (e) {}\n                }\n                abort(\"initRandomDevice\")\n            };\n            var randomFill = view => (randomFill = initRandomFill())(view);\n\n            function _getentropy(buffer, size) {\n                buffer >>>= 0;\n                size >>>= 0;\n                randomFill(GROWABLE_HEAP_U8().subarray(buffer >>> 0, buffer + size >>> 0));\n                return 0\n            }\n\n            function _getnameinfo(sa, salen, node, nodelen, serv, servlen, flags) {\n                sa >>>= 0;\n                node >>>= 0;\n                serv >>>= 0;\n                var info = readSockaddr(sa, salen);\n                if (info.errno) {\n                    return -6\n                }\n                var port = info.port;\n                var addr = info.addr;\n                var overflowed = false;\n                if (node && nodelen) {\n                    var lookup;\n                    if (flags & 1 || !(lookup = DNS.lookup_addr(addr))) {\n                        if (flags & 8) {\n                            return -2\n                        }\n                    } else {\n                        addr = lookup\n                    }\n                    var numBytesWrittenExclNull = stringToUTF8(addr, node, nodelen);\n                    if (numBytesWrittenExclNull + 1 >= nodelen) {\n                        overflowed = true\n                    }\n                }\n                if (serv && servlen) {\n                    port = \"\" + port;\n                    var numBytesWrittenExclNull = stringToUTF8(port, serv, servlen);\n                    if (numBytesWrittenExclNull + 1 >= servlen) {\n                        overflowed = true\n                    }\n                }\n                if (overflowed) {\n                    return -12\n                }\n                return 0\n            }\n            var isLeapYear = year => year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n            var arraySum = (array, index) => {\n                var sum = 0;\n                for (var i = 0; i <= index; sum += array[i++]) {}\n                return sum\n            };\n            var MONTH_DAYS_LEAP = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n            var MONTH_DAYS_REGULAR = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n            var addDays = (date, days) => {\n                var newDate = new Date(date.getTime());\n                while (days > 0) {\n                    var leap = isLeapYear(newDate.getFullYear());\n                    var currentMonth = newDate.getMonth();\n                    var daysInCurrentMonth = (leap ? MONTH_DAYS_LEAP : MONTH_DAYS_REGULAR)[currentMonth];\n                    if (days > daysInCurrentMonth - newDate.getDate()) {\n                        days -= daysInCurrentMonth - newDate.getDate() + 1;\n                        newDate.setDate(1);\n                        if (currentMonth < 11) {\n                            newDate.setMonth(currentMonth + 1)\n                        } else {\n                            newDate.setMonth(0);\n                            newDate.setFullYear(newDate.getFullYear() + 1)\n                        }\n                    } else {\n                        newDate.setDate(newDate.getDate() + days);\n                        return newDate\n                    }\n                }\n                return newDate\n            };\n            var lengthBytesUTF8 = str => {\n                var len = 0;\n                for (var i = 0; i < str.length; ++i) {\n                    var c = str.charCodeAt(i);\n                    if (c <= 127) {\n                        len++\n                    } else if (c <= 2047) {\n                        len += 2\n                    } else if (c >= 55296 && c <= 57343) {\n                        len += 4;\n                        ++i\n                    } else {\n                        len += 3\n                    }\n                }\n                return len\n            };\n\n            function intArrayFromString(stringy, dontAddNull, length) {\n                var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;\n                var u8array = new Array(len);\n                var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);\n                if (dontAddNull) u8array.length = numBytesWritten;\n                return u8array\n            }\n            var writeArrayToMemory = (array, buffer) => {\n                GROWABLE_HEAP_I8().set(array, buffer >>> 0)\n            };\n\n            function _strftime(s, maxsize, format, tm) {\n                s >>>= 0;\n                maxsize >>>= 0;\n                format >>>= 0;\n                tm >>>= 0;\n                var tm_zone = GROWABLE_HEAP_U32()[tm + 40 >>> 2 >>> 0];\n                var date = {\n                    tm_sec: GROWABLE_HEAP_I32()[tm >>> 2 >>> 0],\n                    tm_min: GROWABLE_HEAP_I32()[tm + 4 >>> 2 >>> 0],\n                    tm_hour: GROWABLE_HEAP_I32()[tm + 8 >>> 2 >>> 0],\n                    tm_mday: GROWABLE_HEAP_I32()[tm + 12 >>> 2 >>> 0],\n                    tm_mon: GROWABLE_HEAP_I32()[tm + 16 >>> 2 >>> 0],\n                    tm_year: GROWABLE_HEAP_I32()[tm + 20 >>> 2 >>> 0],\n                    tm_wday: GROWABLE_HEAP_I32()[tm + 24 >>> 2 >>> 0],\n                    tm_yday: GROWABLE_HEAP_I32()[tm + 28 >>> 2 >>> 0],\n                    tm_isdst: GROWABLE_HEAP_I32()[tm + 32 >>> 2 >>> 0],\n                    tm_gmtoff: GROWABLE_HEAP_I32()[tm + 36 >>> 2 >>> 0],\n                    tm_zone: tm_zone ? UTF8ToString(tm_zone) : \"\"\n                };\n                var pattern = UTF8ToString(format);\n                var EXPANSION_RULES_1 = {\n                    \"%c\": \"%a %b %d %H:%M:%S %Y\",\n                    \"%D\": \"%m/%d/%y\",\n                    \"%F\": \"%Y-%m-%d\",\n                    \"%h\": \"%b\",\n                    \"%r\": \"%I:%M:%S %p\",\n                    \"%R\": \"%H:%M\",\n                    \"%T\": \"%H:%M:%S\",\n                    \"%x\": \"%m/%d/%y\",\n                    \"%X\": \"%H:%M:%S\",\n                    \"%Ec\": \"%c\",\n                    \"%EC\": \"%C\",\n                    \"%Ex\": \"%m/%d/%y\",\n                    \"%EX\": \"%H:%M:%S\",\n                    \"%Ey\": \"%y\",\n                    \"%EY\": \"%Y\",\n                    \"%Od\": \"%d\",\n                    \"%Oe\": \"%e\",\n                    \"%OH\": \"%H\",\n                    \"%OI\": \"%I\",\n                    \"%Om\": \"%m\",\n                    \"%OM\": \"%M\",\n                    \"%OS\": \"%S\",\n                    \"%Ou\": \"%u\",\n                    \"%OU\": \"%U\",\n                    \"%OV\": \"%V\",\n                    \"%Ow\": \"%w\",\n                    \"%OW\": \"%W\",\n                    \"%Oy\": \"%y\"\n                };\n                for (var rule in EXPANSION_RULES_1) {\n                    pattern = pattern.replace(new RegExp(rule, \"g\"), EXPANSION_RULES_1[rule])\n                }\n                var WEEKDAYS = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n                var MONTHS = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n                function leadingSomething(value, digits, character) {\n                    var str = typeof value == \"number\" ? value.toString() : value || \"\";\n                    while (str.length < digits) {\n                        str = character[0] + str\n                    }\n                    return str\n                }\n\n                function leadingNulls(value, digits) {\n                    return leadingSomething(value, digits, \"0\")\n                }\n\n                function compareByDay(date1, date2) {\n                    function sgn(value) {\n                        return value < 0 ? -1 : value > 0 ? 1 : 0\n                    }\n                    var compare;\n                    if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {\n                        if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {\n                            compare = sgn(date1.getDate() - date2.getDate())\n                        }\n                    }\n                    return compare\n                }\n\n                function getFirstWeekStartDate(janFourth) {\n                    switch (janFourth.getDay()) {\n                        case 0:\n                            return new Date(janFourth.getFullYear() - 1, 11, 29);\n                        case 1:\n                            return janFourth;\n                        case 2:\n                            return new Date(janFourth.getFullYear(), 0, 3);\n                        case 3:\n                            return new Date(janFourth.getFullYear(), 0, 2);\n                        case 4:\n                            return new Date(janFourth.getFullYear(), 0, 1);\n                        case 5:\n                            return new Date(janFourth.getFullYear() - 1, 11, 31);\n                        case 6:\n                            return new Date(janFourth.getFullYear() - 1, 11, 30)\n                    }\n                }\n\n                function getWeekBasedYear(date) {\n                    var thisDate = addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);\n                    var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);\n                    var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4);\n                    var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);\n                    var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);\n                    if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {\n                        if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {\n                            return thisDate.getFullYear() + 1\n                        }\n                        return thisDate.getFullYear()\n                    }\n                    return thisDate.getFullYear() - 1\n                }\n                var EXPANSION_RULES_2 = {\n                    \"%a\": date => WEEKDAYS[date.tm_wday].substring(0, 3),\n                    \"%A\": date => WEEKDAYS[date.tm_wday],\n                    \"%b\": date => MONTHS[date.tm_mon].substring(0, 3),\n                    \"%B\": date => MONTHS[date.tm_mon],\n                    \"%C\": date => {\n                        var year = date.tm_year + 1900;\n                        return leadingNulls(year / 100 | 0, 2)\n                    },\n                    \"%d\": date => leadingNulls(date.tm_mday, 2),\n                    \"%e\": date => leadingSomething(date.tm_mday, 2, \" \"),\n                    \"%g\": date => getWeekBasedYear(date).toString().substring(2),\n                    \"%G\": getWeekBasedYear,\n                    \"%H\": date => leadingNulls(date.tm_hour, 2),\n                    \"%I\": date => {\n                        var twelveHour = date.tm_hour;\n                        if (twelveHour == 0) twelveHour = 12;\n                        else if (twelveHour > 12) twelveHour -= 12;\n                        return leadingNulls(twelveHour, 2)\n                    },\n                    \"%j\": date => leadingNulls(date.tm_mday + arraySum(isLeapYear(date.tm_year + 1900) ? MONTH_DAYS_LEAP : MONTH_DAYS_REGULAR, date.tm_mon - 1), 3),\n                    \"%m\": date => leadingNulls(date.tm_mon + 1, 2),\n                    \"%M\": date => leadingNulls(date.tm_min, 2),\n                    \"%n\": () => \"\\n\",\n                    \"%p\": date => {\n                        if (date.tm_hour >= 0 && date.tm_hour < 12) {\n                            return \"AM\"\n                        }\n                        return \"PM\"\n                    },\n                    \"%S\": date => leadingNulls(date.tm_sec, 2),\n                    \"%t\": () => \"\\t\",\n                    \"%u\": date => date.tm_wday || 7,\n                    \"%U\": date => {\n                        var days = date.tm_yday + 7 - date.tm_wday;\n                        return leadingNulls(Math.floor(days / 7), 2)\n                    },\n                    \"%V\": date => {\n                        var val = Math.floor((date.tm_yday + 7 - (date.tm_wday + 6) % 7) / 7);\n                        if ((date.tm_wday + 371 - date.tm_yday - 2) % 7 <= 2) {\n                            val++\n                        }\n                        if (!val) {\n                            val = 52;\n                            var dec31 = (date.tm_wday + 7 - date.tm_yday - 1) % 7;\n                            if (dec31 == 4 || dec31 == 5 && isLeapYear(date.tm_year % 400 - 1)) {\n                                val++\n                            }\n                        } else if (val == 53) {\n                            var jan1 = (date.tm_wday + 371 - date.tm_yday) % 7;\n                            if (jan1 != 4 && (jan1 != 3 || !isLeapYear(date.tm_year))) val = 1\n                        }\n                        return leadingNulls(val, 2)\n                    },\n                    \"%w\": date => date.tm_wday,\n                    \"%W\": date => {\n                        var days = date.tm_yday + 7 - (date.tm_wday + 6) % 7;\n                        return leadingNulls(Math.floor(days / 7), 2)\n                    },\n                    \"%y\": date => (date.tm_year + 1900).toString().substring(2),\n                    \"%Y\": date => date.tm_year + 1900,\n                    \"%z\": date => {\n                        var off = date.tm_gmtoff;\n                        var ahead = off >= 0;\n                        off = Math.abs(off) / 60;\n                        off = off / 60 * 100 + off % 60;\n                        return (ahead ? \"+\" : \"-\") + String(\"0000\" + off).slice(-4)\n                    },\n                    \"%Z\": date => date.tm_zone,\n                    \"%%\": () => \"%\"\n                };\n                pattern = pattern.replace(/%%/g, \"\\0\\0\");\n                for (var rule in EXPANSION_RULES_2) {\n                    if (pattern.includes(rule)) {\n                        pattern = pattern.replace(new RegExp(rule, \"g\"), EXPANSION_RULES_2[rule](date))\n                    }\n                }\n                pattern = pattern.replace(/\\0\\0/g, \"%\");\n                var bytes = intArrayFromString(pattern, false);\n                if (bytes.length > maxsize) {\n                    return 0\n                }\n                writeArrayToMemory(bytes, s);\n                return bytes.length - 1\n            }\n\n            function _strftime_l(s, maxsize, format, tm, loc) {\n                s >>>= 0;\n                maxsize >>>= 0;\n                format >>>= 0;\n                tm >>>= 0;\n                loc >>>= 0;\n                return _strftime(s, maxsize, format, tm)\n            }\n            var getCFunc = ident => {\n                var func = Module[\"_\" + ident];\n                return func\n            };\n            var stringToUTF8OnStack = str => {\n                var size = lengthBytesUTF8(str) + 1;\n                var ret = stackAlloc(size);\n                stringToUTF8(str, ret, size);\n                return ret\n            };\n            var ccall = (ident, returnType, argTypes, args, opts) => {\n                var toC = {\n                    \"string\": str => {\n                        var ret = 0;\n                        if (str !== null && str !== undefined && str !== 0) {\n                            ret = stringToUTF8OnStack(str)\n                        }\n                        return ret\n                    },\n                    \"array\": arr => {\n                        var ret = stackAlloc(arr.length);\n                        writeArrayToMemory(arr, ret);\n                        return ret\n                    }\n                };\n\n                function convertReturnValue(ret) {\n                    if (returnType === \"string\") {\n                        return UTF8ToString(ret)\n                    }\n                    if (returnType === \"boolean\") return Boolean(ret);\n                    return ret\n                }\n                var func = getCFunc(ident);\n                var cArgs = [];\n                var stack = 0;\n                if (args) {\n                    for (var i = 0; i < args.length; i++) {\n                        var converter = toC[argTypes[i]];\n                        if (converter) {\n                            if (stack === 0) stack = stackSave();\n                            cArgs[i] = converter(args[i])\n                        } else {\n                            cArgs[i] = args[i]\n                        }\n                    }\n                }\n                var ret = func.apply(null, cArgs);\n\n                function onDone(ret) {\n                    if (stack !== 0) stackRestore(stack);\n                    return convertReturnValue(ret)\n                }\n                ret = onDone(ret);\n                return ret\n            };\n            PThread.init();\n            var proxiedFunctionTable = [_proc_exit, exitOnMainThread, pthreadCreateProxied, ___syscall__newselect, ___syscall_bind, ___syscall_connect, ___syscall_faccessat, ___syscall_fcntl64, ___syscall_fstat64, ___syscall_ftruncate64, ___syscall_getdents64, ___syscall_getpeername, ___syscall_getsockopt, ___syscall_ioctl, ___syscall_lstat64, ___syscall_mkdirat, ___syscall_newfstatat, ___syscall_openat, ___syscall_recvfrom, ___syscall_renameat, ___syscall_rmdir, ___syscall_sendto, ___syscall_socket, ___syscall_stat64, ___syscall_unlinkat, _environ_get, _environ_sizes_get, _fd_close, _fd_fdstat_get, _fd_pread, _fd_pwrite, _fd_read, _fd_seek, _fd_sync, _fd_write, _getaddrinfo];\n            var wasmImports = {\n                E: ___emscripten_init_main_thread_js,\n                s: ___emscripten_thread_cleanup,\n                ga: ___pthread_create_js,\n                $: ___syscall__newselect,\n                ea: ___syscall_bind,\n                ca: ___syscall_connect,\n                X: ___syscall_faccessat,\n                b: ___syscall_fcntl64,\n                W: ___syscall_fstat64,\n                x: ___syscall_ftruncate64,\n                R: ___syscall_getdents64,\n                Z: ___syscall_getpeername,\n                _: ___syscall_getsockopt,\n                h: ___syscall_ioctl,\n                T: ___syscall_lstat64,\n                S: ___syscall_mkdirat,\n                U: ___syscall_newfstatat,\n                r: ___syscall_openat,\n                aa: ___syscall_recvfrom,\n                P: ___syscall_renameat,\n                l: ___syscall_rmdir,\n                ba: ___syscall_sendto,\n                o: ___syscall_socket,\n                V: ___syscall_stat64,\n                m: ___syscall_unlinkat,\n                oa: __emscripten_get_now_is_monotonic,\n                da: __emscripten_notify_mailbox_postmessage,\n                M: __emscripten_receive_on_main_thread_js,\n                v: __emscripten_thread_mailbox_await,\n                u: __emscripten_thread_set_strongref,\n                e: _abort,\n                H: _duckdb_web_fs_directory_create,\n                I: _duckdb_web_fs_directory_exists,\n                F: _duckdb_web_fs_directory_list_files,\n                G: _duckdb_web_fs_directory_remove,\n                k: _duckdb_web_fs_file_close,\n                C: _duckdb_web_fs_file_exists,\n                w: _duckdb_web_fs_file_get_last_modified_time,\n                D: _duckdb_web_fs_file_move,\n                K: _duckdb_web_fs_file_open,\n                f: _duckdb_web_fs_file_read,\n                J: _duckdb_web_fs_file_truncate,\n                g: _duckdb_web_fs_file_write,\n                L: _duckdb_web_fs_get_default_data_protocol,\n                B: _duckdb_web_fs_glob,\n                j: _duckdb_web_test_platform_feature,\n                N: _duckdb_web_udf_scalar_call,\n                n: _emscripten_check_blocking_allowed,\n                pa: _emscripten_date_now,\n                t: _emscripten_exit_with_live_runtime,\n                ha: _emscripten_get_heap_max,\n                c: _emscripten_get_now,\n                ia: _emscripten_num_logical_cores,\n                na: _emscripten_resize_heap,\n                ka: _environ_get,\n                la: _environ_sizes_get,\n                fa: _exit,\n                d: _fd_close,\n                ma: _fd_fdstat_get,\n                z: _fd_pread,\n                y: _fd_pwrite,\n                q: _fd_read,\n                A: _fd_seek,\n                Q: _fd_sync,\n                i: _fd_write,\n                p: _getaddrinfo,\n                O: _getentropy,\n                Y: _getnameinfo,\n                a: wasmMemory || Module[\"wasmMemory\"],\n                ja: _strftime_l\n            };\n            var wasmExports = createWasm();\n            var _main = Module[\"_main\"] = (a0, a1) => (_main = Module[\"_main\"] = wasmExports[\"ra\"])(a0, a1);\n            var _duckdb_web_fs_glob_add_path = Module[\"_duckdb_web_fs_glob_add_path\"] = a0 => (_duckdb_web_fs_glob_add_path = Module[\"_duckdb_web_fs_glob_add_path\"] = wasmExports[\"ta\"])(a0);\n            var _duckdb_web_clear_response = Module[\"_duckdb_web_clear_response\"] = () => (_duckdb_web_clear_response = Module[\"_duckdb_web_clear_response\"] = wasmExports[\"ua\"])();\n            var _duckdb_web_fail_with = Module[\"_duckdb_web_fail_with\"] = a0 => (_duckdb_web_fail_with = Module[\"_duckdb_web_fail_with\"] = wasmExports[\"va\"])(a0);\n            var _duckdb_web_reset = Module[\"_duckdb_web_reset\"] = a0 => (_duckdb_web_reset = Module[\"_duckdb_web_reset\"] = wasmExports[\"wa\"])(a0);\n            var _duckdb_web_connect = Module[\"_duckdb_web_connect\"] = () => (_duckdb_web_connect = Module[\"_duckdb_web_connect\"] = wasmExports[\"xa\"])();\n            var _duckdb_web_disconnect = Module[\"_duckdb_web_disconnect\"] = a0 => (_duckdb_web_disconnect = Module[\"_duckdb_web_disconnect\"] = wasmExports[\"ya\"])(a0);\n            var _duckdb_web_flush_files = Module[\"_duckdb_web_flush_files\"] = () => (_duckdb_web_flush_files = Module[\"_duckdb_web_flush_files\"] = wasmExports[\"za\"])();\n            var _duckdb_web_flush_file = Module[\"_duckdb_web_flush_file\"] = a0 => (_duckdb_web_flush_file = Module[\"_duckdb_web_flush_file\"] = wasmExports[\"Aa\"])(a0);\n            var _duckdb_web_open = Module[\"_duckdb_web_open\"] = (a0, a1) => (_duckdb_web_open = Module[\"_duckdb_web_open\"] = wasmExports[\"Ba\"])(a0, a1);\n            var _duckdb_web_get_global_file_info = Module[\"_duckdb_web_get_global_file_info\"] = (a0, a1) => (_duckdb_web_get_global_file_info = Module[\"_duckdb_web_get_global_file_info\"] = wasmExports[\"Ca\"])(a0, a1);\n            var _duckdb_web_collect_file_stats = Module[\"_duckdb_web_collect_file_stats\"] = (a0, a1, a2) => (_duckdb_web_collect_file_stats = Module[\"_duckdb_web_collect_file_stats\"] = wasmExports[\"Da\"])(a0, a1, a2);\n            var _duckdb_web_export_file_stats = Module[\"_duckdb_web_export_file_stats\"] = (a0, a1) => (_duckdb_web_export_file_stats = Module[\"_duckdb_web_export_file_stats\"] = wasmExports[\"Ea\"])(a0, a1);\n            var _duckdb_web_fs_drop_file = Module[\"_duckdb_web_fs_drop_file\"] = (a0, a1) => (_duckdb_web_fs_drop_file = Module[\"_duckdb_web_fs_drop_file\"] = wasmExports[\"Fa\"])(a0, a1);\n            var _duckdb_web_fs_drop_files = Module[\"_duckdb_web_fs_drop_files\"] = a0 => (_duckdb_web_fs_drop_files = Module[\"_duckdb_web_fs_drop_files\"] = wasmExports[\"Ga\"])(a0);\n            var _duckdb_web_fs_glob_file_infos = Module[\"_duckdb_web_fs_glob_file_infos\"] = (a0, a1) => (_duckdb_web_fs_glob_file_infos = Module[\"_duckdb_web_fs_glob_file_infos\"] = wasmExports[\"Ha\"])(a0, a1);\n            var _duckdb_web_fs_get_file_info_by_id = Module[\"_duckdb_web_fs_get_file_info_by_id\"] = (a0, a1, a2) => (_duckdb_web_fs_get_file_info_by_id = Module[\"_duckdb_web_fs_get_file_info_by_id\"] = wasmExports[\"Ia\"])(a0, a1, a2);\n            var _duckdb_web_fs_get_file_info_by_name = Module[\"_duckdb_web_fs_get_file_info_by_name\"] = (a0, a1, a2) => (_duckdb_web_fs_get_file_info_by_name = Module[\"_duckdb_web_fs_get_file_info_by_name\"] = wasmExports[\"Ja\"])(a0, a1, a2);\n            var _duckdb_web_fs_register_file_url = Module[\"_duckdb_web_fs_register_file_url\"] = (a0, a1, a2, a3, a4) => (_duckdb_web_fs_register_file_url = Module[\"_duckdb_web_fs_register_file_url\"] = wasmExports[\"Ka\"])(a0, a1, a2, a3, a4);\n            var _duckdb_web_fs_register_file_buffer = Module[\"_duckdb_web_fs_register_file_buffer\"] = (a0, a1, a2, a3) => (_duckdb_web_fs_register_file_buffer = Module[\"_duckdb_web_fs_register_file_buffer\"] = wasmExports[\"La\"])(a0, a1, a2, a3);\n            var _duckdb_web_copy_file_to_buffer = Module[\"_duckdb_web_copy_file_to_buffer\"] = (a0, a1) => (_duckdb_web_copy_file_to_buffer = Module[\"_duckdb_web_copy_file_to_buffer\"] = wasmExports[\"Ma\"])(a0, a1);\n            var _duckdb_web_copy_file_to_path = Module[\"_duckdb_web_copy_file_to_path\"] = (a0, a1, a2) => (_duckdb_web_copy_file_to_path = Module[\"_duckdb_web_copy_file_to_path\"] = wasmExports[\"Na\"])(a0, a1, a2);\n            var _duckdb_web_get_version = Module[\"_duckdb_web_get_version\"] = a0 => (_duckdb_web_get_version = Module[\"_duckdb_web_get_version\"] = wasmExports[\"Oa\"])(a0);\n            var _duckdb_web_get_feature_flags = Module[\"_duckdb_web_get_feature_flags\"] = () => (_duckdb_web_get_feature_flags = Module[\"_duckdb_web_get_feature_flags\"] = wasmExports[\"Pa\"])();\n            var _duckdb_web_tokenize = Module[\"_duckdb_web_tokenize\"] = (a0, a1) => (_duckdb_web_tokenize = Module[\"_duckdb_web_tokenize\"] = wasmExports[\"Qa\"])(a0, a1);\n            var _duckdb_web_udf_scalar_create = Module[\"_duckdb_web_udf_scalar_create\"] = (a0, a1, a2) => (_duckdb_web_udf_scalar_create = Module[\"_duckdb_web_udf_scalar_create\"] = wasmExports[\"Ra\"])(a0, a1, a2);\n            var _duckdb_web_prepared_create = Module[\"_duckdb_web_prepared_create\"] = (a0, a1, a2) => (_duckdb_web_prepared_create = Module[\"_duckdb_web_prepared_create\"] = wasmExports[\"Sa\"])(a0, a1, a2);\n            var _duckdb_web_prepared_close = Module[\"_duckdb_web_prepared_close\"] = (a0, a1, a2) => (_duckdb_web_prepared_close = Module[\"_duckdb_web_prepared_close\"] = wasmExports[\"Ta\"])(a0, a1, a2);\n            var _duckdb_web_prepared_run = Module[\"_duckdb_web_prepared_run\"] = (a0, a1, a2, a3) => (_duckdb_web_prepared_run = Module[\"_duckdb_web_prepared_run\"] = wasmExports[\"Ua\"])(a0, a1, a2, a3);\n            var _duckdb_web_prepared_send = Module[\"_duckdb_web_prepared_send\"] = (a0, a1, a2, a3) => (_duckdb_web_prepared_send = Module[\"_duckdb_web_prepared_send\"] = wasmExports[\"Va\"])(a0, a1, a2, a3);\n            var _duckdb_web_query_run = Module[\"_duckdb_web_query_run\"] = (a0, a1, a2) => (_duckdb_web_query_run = Module[\"_duckdb_web_query_run\"] = wasmExports[\"Wa\"])(a0, a1, a2);\n            var _duckdb_web_pending_query_start = Module[\"_duckdb_web_pending_query_start\"] = (a0, a1, a2) => (_duckdb_web_pending_query_start = Module[\"_duckdb_web_pending_query_start\"] = wasmExports[\"Xa\"])(a0, a1, a2);\n            var _duckdb_web_pending_query_poll = Module[\"_duckdb_web_pending_query_poll\"] = (a0, a1, a2) => (_duckdb_web_pending_query_poll = Module[\"_duckdb_web_pending_query_poll\"] = wasmExports[\"Ya\"])(a0, a1, a2);\n            var _duckdb_web_pending_query_cancel = Module[\"_duckdb_web_pending_query_cancel\"] = (a0, a1) => (_duckdb_web_pending_query_cancel = Module[\"_duckdb_web_pending_query_cancel\"] = wasmExports[\"Za\"])(a0, a1);\n            var _duckdb_web_query_fetch_results = Module[\"_duckdb_web_query_fetch_results\"] = (a0, a1) => (_duckdb_web_query_fetch_results = Module[\"_duckdb_web_query_fetch_results\"] = wasmExports[\"_a\"])(a0, a1);\n            var _duckdb_web_get_tablenames = Module[\"_duckdb_web_get_tablenames\"] = (a0, a1, a2) => (_duckdb_web_get_tablenames = Module[\"_duckdb_web_get_tablenames\"] = wasmExports[\"$a\"])(a0, a1, a2);\n            var _duckdb_web_insert_arrow_from_ipc_stream = Module[\"_duckdb_web_insert_arrow_from_ipc_stream\"] = (a0, a1, a2, a3, a4) => (_duckdb_web_insert_arrow_from_ipc_stream = Module[\"_duckdb_web_insert_arrow_from_ipc_stream\"] = wasmExports[\"ab\"])(a0, a1, a2, a3, a4);\n            var _duckdb_web_insert_csv_from_path = Module[\"_duckdb_web_insert_csv_from_path\"] = (a0, a1, a2, a3) => (_duckdb_web_insert_csv_from_path = Module[\"_duckdb_web_insert_csv_from_path\"] = wasmExports[\"bb\"])(a0, a1, a2, a3);\n            var _duckdb_web_insert_json_from_path = Module[\"_duckdb_web_insert_json_from_path\"] = (a0, a1, a2, a3) => (_duckdb_web_insert_json_from_path = Module[\"_duckdb_web_insert_json_from_path\"] = wasmExports[\"cb\"])(a0, a1, a2, a3);\n            var _malloc = Module[\"_malloc\"] = a0 => (_malloc = Module[\"_malloc\"] = wasmExports[\"ob\"])(a0);\n            var _free = Module[\"_free\"] = a0 => (_free = Module[\"_free\"] = wasmExports[\"pb\"])(a0);\n            var stackSave = () => (stackSave = wasmExports[\"sb\"])();\n            var stackRestore = a0 => (stackRestore = wasmExports[\"tb\"])(a0);\n            var stackAlloc = a0 => (stackAlloc = wasmExports[\"ub\"])(a0);\n\n            function applySignatureConversions(wasmExports) {\n                wasmExports = Object.assign({}, wasmExports);\n                var makeWrapper_p = f => () => f() >>> 0;\n                var makeWrapper_pp = f => a0 => f(a0) >>> 0;\n                wasmExports[\"eb\"] = makeWrapper_p(wasmExports[\"eb\"]);\n                wasmExports[\"emscripten_main_runtime_thread_id\"] = makeWrapper_p(wasmExports[\"emscripten_main_runtime_thread_id\"]);\n                wasmExports[\"ob\"] = makeWrapper_pp(wasmExports[\"ob\"]);\n                wasmExports[\"sb\"] = makeWrapper_p(wasmExports[\"sb\"]);\n                wasmExports[\"ub\"] = makeWrapper_pp(wasmExports[\"ub\"]);\n                return wasmExports\n            }\n            Module[\"wasmMemory\"] = wasmMemory;\n            Module[\"stackAlloc\"] = stackAlloc;\n            Module[\"stackSave\"] = stackSave;\n            Module[\"stackRestore\"] = stackRestore;\n            Module[\"keepRuntimeAlive\"] = keepRuntimeAlive;\n            Module[\"ccall\"] = ccall;\n            Module[\"ExitStatus\"] = ExitStatus;\n            Module[\"PThread\"] = PThread;\n            var calledRun;\n            dependenciesFulfilled = function runCaller() {\n                if (!calledRun) run();\n                if (!calledRun) dependenciesFulfilled = runCaller\n            };\n\n            function callMain() {\n                var entryFunction = _main;\n                var argc = 0;\n                var argv = 0;\n                try {\n                    var ret = entryFunction(argc, argv);\n                    exitJS(ret, true);\n                    return ret\n                } catch (e) {\n                    return handleException(e)\n                }\n            }\n\n            function run() {\n                if (runDependencies > 0) {\n                    return\n                }\n                if (ENVIRONMENT_IS_PTHREAD) {\n                    readyPromiseResolve(Module);\n                    initRuntime();\n                    startWorker(Module);\n                    return\n                }\n                preRun();\n                if (runDependencies > 0) {\n                    return\n                }\n\n                function doRun() {\n                    if (calledRun) return;\n                    calledRun = true;\n                    Module[\"calledRun\"] = true;\n                    if (ABORT) return;\n                    initRuntime();\n                    preMain();\n                    readyPromiseResolve(Module);\n                    if (Module[\"onRuntimeInitialized\"]) Module[\"onRuntimeInitialized\"]();\n                    if (shouldRunNow) callMain();\n                    postRun()\n                }\n                if (Module[\"setStatus\"]) {\n                    Module[\"setStatus\"](\"Running...\");\n                    setTimeout(function() {\n                        setTimeout(function() {\n                            Module[\"setStatus\"](\"\")\n                        }, 1);\n                        doRun()\n                    }, 1)\n                } else {\n                    doRun()\n                }\n            }\n            if (Module[\"preInit\"]) {\n                if (typeof Module[\"preInit\"] == \"function\") Module[\"preInit\"] = [Module[\"preInit\"]];\n                while (Module[\"preInit\"].length > 0) {\n                    Module[\"preInit\"].pop()()\n                }\n            }\n            var shouldRunNow = true;\n            if (Module[\"noInitialRun\"]) shouldRunNow = false;\n            run();\n\n\n            return moduleArg.ready\n        }\n    );\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n    module.exports = DuckDB;\nelse if (typeof define === 'function' && define['amd'])\n    define([], () => DuckDB);\n", "/**\n * [js-sha256]{@link https://github.com/emn178/js-sha256}\n *\n * @version 0.11.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2024\n * @license MIT\n */\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_SHA256_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [-2147483648, 8388608, 32768, 128];\n  var SHIFT = [24, 16, 8, 0];\n  var K = [\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n  ];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];\n\n  var blocks = [];\n\n  if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  var createOutputMethod = function (outputType, is224) {\n    return function (message) {\n      return new Sha256(is224, true).update(message)[outputType]();\n    };\n  };\n\n  var createMethod = function (is224) {\n    var method = createOutputMethod('hex', is224);\n    if (NODE_JS) {\n      method = nodeWrap(method, is224);\n    }\n    method.create = function () {\n      return new Sha256(is224);\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type, is224);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method, is224) {\n    var crypto = require('crypto')\n    var Buffer = require('buffer').Buffer;\n    var algorithm = is224 ? 'sha224' : 'sha256';\n    var bufferFrom;\n    if (Buffer.from && !root.JS_SHA256_NO_BUFFER_FROM) {\n      bufferFrom = Buffer.from;\n    } else {\n      bufferFrom = function (message) {\n        return new Buffer(message);\n      };\n    }\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash(algorithm).update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw new Error(ERROR);\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash(algorithm).update(bufferFrom(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  var createHmacOutputMethod = function (outputType, is224) {\n    return function (key, message) {\n      return new HmacSha256(key, is224, true).update(message)[outputType]();\n    };\n  };\n\n  var createHmacMethod = function (is224) {\n    var method = createHmacOutputMethod('hex', is224);\n    method.create = function (key) {\n      return new HmacSha256(key, is224);\n    };\n    method.update = function (key, message) {\n      return method.create(key).update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createHmacOutputMethod(type, is224);\n    }\n    return method;\n  };\n\n  function Sha256(is224, sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n    } else {\n      this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    if (is224) {\n      this.h0 = 0xc1059ed8;\n      this.h1 = 0x367cd507;\n      this.h2 = 0x3070dd17;\n      this.h3 = 0xf70e5939;\n      this.h4 = 0xffc00b31;\n      this.h5 = 0x68581511;\n      this.h6 = 0x64f98fa7;\n      this.h7 = 0xbefa4fa4;\n    } else { // 256\n      this.h0 = 0x6a09e667;\n      this.h1 = 0xbb67ae85;\n      this.h2 = 0x3c6ef372;\n      this.h3 = 0xa54ff53a;\n      this.h4 = 0x510e527f;\n      this.h5 = 0x9b05688c;\n      this.h6 = 0x1f83d9ab;\n      this.h7 = 0x5be0cd19;\n    }\n\n    this.block = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n    this.is224 = is224;\n  }\n\n  Sha256.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw new Error(ERROR);\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw new Error(ERROR);\n          }\n        }\n      } else {\n        throw new Error(ERROR);\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = this.block;\n        this.block = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n          blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n          blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n          blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        for (i = this.start; index < length && i < 64; ++index) {\n          blocks[i >>> 2] |= message[index] << SHIFT[i++ & 3];\n        }\n      } else {\n        for (i = this.start; index < length && i < 64; ++index) {\n          code = message.charCodeAt(index);\n          if (code < 0x80) {\n            blocks[i >>> 2] |= code << SHIFT[i++ & 3];\n          } else if (code < 0x800) {\n            blocks[i >>> 2] |= (0xc0 | (code >>> 6)) << SHIFT[i++ & 3];\n            blocks[i >>> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else if (code < 0xd800 || code >= 0xe000) {\n            blocks[i >>> 2] |= (0xe0 | (code >>> 12)) << SHIFT[i++ & 3];\n            blocks[i >>> 2] |= (0x80 | ((code >>> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >>> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else {\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n            blocks[i >>> 2] |= (0xf0 | (code >>> 18)) << SHIFT[i++ & 3];\n            blocks[i >>> 2] |= (0x80 | ((code >>> 12) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >>> 2] |= (0x80 | ((code >>> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >>> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          }\n        }\n      }\n\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.block = blocks[16];\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Sha256.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[16] = this.block;\n    blocks[i >>> 2] |= EXTRA[i & 3];\n    this.block = blocks[16];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = this.block;\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;\n    blocks[15] = this.bytes << 3;\n    this.hash();\n  };\n\n  Sha256.prototype.hash = function () {\n    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6,\n      h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;\n\n    for (j = 16; j < 64; ++j) {\n      // rightrotate\n      t1 = blocks[j - 15];\n      s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);\n      t1 = blocks[j - 2];\n      s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10);\n      blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;\n    }\n\n    bc = b & c;\n    for (j = 0; j < 64; j += 4) {\n      if (this.first) {\n        if (this.is224) {\n          ab = 300032;\n          t1 = blocks[0] - 1413257819;\n          h = t1 - 150054599 << 0;\n          d = t1 + 24177077 << 0;\n        } else {\n          ab = 704751109;\n          t1 = blocks[0] - 210244248;\n          h = t1 - 1521486534 << 0;\n          d = t1 + 143694565 << 0;\n        }\n        this.first = false;\n      } else {\n        s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10));\n        s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7));\n        ab = a & b;\n        maj = ab ^ (a & c) ^ bc;\n        ch = (e & f) ^ (~e & g);\n        t1 = h + s1 + ch + K[j] + blocks[j];\n        t2 = s0 + maj;\n        h = d + t1 << 0;\n        d = t1 + t2 << 0;\n      }\n      s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10));\n      s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7));\n      da = d & a;\n      maj = da ^ (d & b) ^ ab;\n      ch = (h & e) ^ (~h & f);\n      t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];\n      t2 = s0 + maj;\n      g = c + t1 << 0;\n      c = t1 + t2 << 0;\n      s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10));\n      s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7));\n      cd = c & d;\n      maj = cd ^ (c & a) ^ da;\n      ch = (g & h) ^ (~g & e);\n      t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];\n      t2 = s0 + maj;\n      f = b + t1 << 0;\n      b = t1 + t2 << 0;\n      s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10));\n      s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7));\n      bc = b & c;\n      maj = bc ^ (b & d) ^ cd;\n      ch = (f & g) ^ (~f & h);\n      t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];\n      t2 = s0 + maj;\n      e = a + t1 << 0;\n      a = t1 + t2 << 0;\n      this.chromeBugWorkAround = true;\n    }\n\n    this.h0 = this.h0 + a << 0;\n    this.h1 = this.h1 + b << 0;\n    this.h2 = this.h2 + c << 0;\n    this.h3 = this.h3 + d << 0;\n    this.h4 = this.h4 + e << 0;\n    this.h5 = this.h5 + f << 0;\n    this.h6 = this.h6 + g << 0;\n    this.h7 = this.h7 + h << 0;\n  };\n\n  Sha256.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,\n      h6 = this.h6, h7 = this.h7;\n\n    var hex = HEX_CHARS[(h0 >>> 28) & 0x0F] + HEX_CHARS[(h0 >>> 24) & 0x0F] +\n      HEX_CHARS[(h0 >>> 20) & 0x0F] + HEX_CHARS[(h0 >>> 16) & 0x0F] +\n      HEX_CHARS[(h0 >>> 12) & 0x0F] + HEX_CHARS[(h0 >>> 8) & 0x0F] +\n      HEX_CHARS[(h0 >>> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h1 >>> 28) & 0x0F] + HEX_CHARS[(h1 >>> 24) & 0x0F] +\n      HEX_CHARS[(h1 >>> 20) & 0x0F] + HEX_CHARS[(h1 >>> 16) & 0x0F] +\n      HEX_CHARS[(h1 >>> 12) & 0x0F] + HEX_CHARS[(h1 >>> 8) & 0x0F] +\n      HEX_CHARS[(h1 >>> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h2 >>> 28) & 0x0F] + HEX_CHARS[(h2 >>> 24) & 0x0F] +\n      HEX_CHARS[(h2 >>> 20) & 0x0F] + HEX_CHARS[(h2 >>> 16) & 0x0F] +\n      HEX_CHARS[(h2 >>> 12) & 0x0F] + HEX_CHARS[(h2 >>> 8) & 0x0F] +\n      HEX_CHARS[(h2 >>> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h3 >>> 28) & 0x0F] + HEX_CHARS[(h3 >>> 24) & 0x0F] +\n      HEX_CHARS[(h3 >>> 20) & 0x0F] + HEX_CHARS[(h3 >>> 16) & 0x0F] +\n      HEX_CHARS[(h3 >>> 12) & 0x0F] + HEX_CHARS[(h3 >>> 8) & 0x0F] +\n      HEX_CHARS[(h3 >>> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h4 >>> 28) & 0x0F] + HEX_CHARS[(h4 >>> 24) & 0x0F] +\n      HEX_CHARS[(h4 >>> 20) & 0x0F] + HEX_CHARS[(h4 >>> 16) & 0x0F] +\n      HEX_CHARS[(h4 >>> 12) & 0x0F] + HEX_CHARS[(h4 >>> 8) & 0x0F] +\n      HEX_CHARS[(h4 >>> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F] +\n      HEX_CHARS[(h5 >>> 28) & 0x0F] + HEX_CHARS[(h5 >>> 24) & 0x0F] +\n      HEX_CHARS[(h5 >>> 20) & 0x0F] + HEX_CHARS[(h5 >>> 16) & 0x0F] +\n      HEX_CHARS[(h5 >>> 12) & 0x0F] + HEX_CHARS[(h5 >>> 8) & 0x0F] +\n      HEX_CHARS[(h5 >>> 4) & 0x0F] + HEX_CHARS[h5 & 0x0F] +\n      HEX_CHARS[(h6 >>> 28) & 0x0F] + HEX_CHARS[(h6 >>> 24) & 0x0F] +\n      HEX_CHARS[(h6 >>> 20) & 0x0F] + HEX_CHARS[(h6 >>> 16) & 0x0F] +\n      HEX_CHARS[(h6 >>> 12) & 0x0F] + HEX_CHARS[(h6 >>> 8) & 0x0F] +\n      HEX_CHARS[(h6 >>> 4) & 0x0F] + HEX_CHARS[h6 & 0x0F];\n    if (!this.is224) {\n      hex += HEX_CHARS[(h7 >>> 28) & 0x0F] + HEX_CHARS[(h7 >>> 24) & 0x0F] +\n        HEX_CHARS[(h7 >>> 20) & 0x0F] + HEX_CHARS[(h7 >>> 16) & 0x0F] +\n        HEX_CHARS[(h7 >>> 12) & 0x0F] + HEX_CHARS[(h7 >>> 8) & 0x0F] +\n        HEX_CHARS[(h7 >>> 4) & 0x0F] + HEX_CHARS[h7 & 0x0F];\n    }\n    return hex;\n  };\n\n  Sha256.prototype.toString = Sha256.prototype.hex;\n\n  Sha256.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,\n      h6 = this.h6, h7 = this.h7;\n\n    var arr = [\n      (h0 >>> 24) & 0xFF, (h0 >>> 16) & 0xFF, (h0 >>> 8) & 0xFF, h0 & 0xFF,\n      (h1 >>> 24) & 0xFF, (h1 >>> 16) & 0xFF, (h1 >>> 8) & 0xFF, h1 & 0xFF,\n      (h2 >>> 24) & 0xFF, (h2 >>> 16) & 0xFF, (h2 >>> 8) & 0xFF, h2 & 0xFF,\n      (h3 >>> 24) & 0xFF, (h3 >>> 16) & 0xFF, (h3 >>> 8) & 0xFF, h3 & 0xFF,\n      (h4 >>> 24) & 0xFF, (h4 >>> 16) & 0xFF, (h4 >>> 8) & 0xFF, h4 & 0xFF,\n      (h5 >>> 24) & 0xFF, (h5 >>> 16) & 0xFF, (h5 >>> 8) & 0xFF, h5 & 0xFF,\n      (h6 >>> 24) & 0xFF, (h6 >>> 16) & 0xFF, (h6 >>> 8) & 0xFF, h6 & 0xFF\n    ];\n    if (!this.is224) {\n      arr.push((h7 >>> 24) & 0xFF, (h7 >>> 16) & 0xFF, (h7 >>> 8) & 0xFF, h7 & 0xFF);\n    }\n    return arr;\n  };\n\n  Sha256.prototype.array = Sha256.prototype.digest;\n\n  Sha256.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(this.is224 ? 28 : 32);\n    var dataView = new DataView(buffer);\n    dataView.setUint32(0, this.h0);\n    dataView.setUint32(4, this.h1);\n    dataView.setUint32(8, this.h2);\n    dataView.setUint32(12, this.h3);\n    dataView.setUint32(16, this.h4);\n    dataView.setUint32(20, this.h5);\n    dataView.setUint32(24, this.h6);\n    if (!this.is224) {\n      dataView.setUint32(28, this.h7);\n    }\n    return buffer;\n  };\n\n  function HmacSha256(key, is224, sharedMemory) {\n    var i, type = typeof key;\n    if (type === 'string') {\n      var bytes = [], length = key.length, index = 0, code;\n      for (i = 0; i < length; ++i) {\n        code = key.charCodeAt(i);\n        if (code < 0x80) {\n          bytes[index++] = code;\n        } else if (code < 0x800) {\n          bytes[index++] = (0xc0 | (code >>> 6));\n          bytes[index++] = (0x80 | (code & 0x3f));\n        } else if (code < 0xd800 || code >= 0xe000) {\n          bytes[index++] = (0xe0 | (code >>> 12));\n          bytes[index++] = (0x80 | ((code >>> 6) & 0x3f));\n          bytes[index++] = (0x80 | (code & 0x3f));\n        } else {\n          code = 0x10000 + (((code & 0x3ff) << 10) | (key.charCodeAt(++i) & 0x3ff));\n          bytes[index++] = (0xf0 | (code >>> 18));\n          bytes[index++] = (0x80 | ((code >>> 12) & 0x3f));\n          bytes[index++] = (0x80 | ((code >>> 6) & 0x3f));\n          bytes[index++] = (0x80 | (code & 0x3f));\n        }\n      }\n      key = bytes;\n    } else {\n      if (type === 'object') {\n        if (key === null) {\n          throw new Error(ERROR);\n        } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {\n          key = new Uint8Array(key);\n        } else if (!Array.isArray(key)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {\n            throw new Error(ERROR);\n          }\n        }\n      } else {\n        throw new Error(ERROR);\n      }\n    }\n\n    if (key.length > 64) {\n      key = (new Sha256(is224, true)).update(key).array();\n    }\n\n    var oKeyPad = [], iKeyPad = [];\n    for (i = 0; i < 64; ++i) {\n      var b = key[i] || 0;\n      oKeyPad[i] = 0x5c ^ b;\n      iKeyPad[i] = 0x36 ^ b;\n    }\n\n    Sha256.call(this, is224, sharedMemory);\n\n    this.update(iKeyPad);\n    this.oKeyPad = oKeyPad;\n    this.inner = true;\n    this.sharedMemory = sharedMemory;\n  }\n  HmacSha256.prototype = new Sha256();\n\n  HmacSha256.prototype.finalize = function () {\n    Sha256.prototype.finalize.call(this);\n    if (this.inner) {\n      this.inner = false;\n      var innerHash = this.array();\n      Sha256.call(this, this.is224, this.sharedMemory);\n      this.update(this.oKeyPad);\n      this.update(innerHash);\n      Sha256.prototype.finalize.call(this);\n    }\n  };\n\n  var exports = createMethod();\n  exports.sha256 = exports;\n  exports.sha224 = createMethod(true);\n  exports.sha256.hmac = createHmacMethod();\n  exports.sha224.hmac = createHmacMethod(true);\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    root.sha256 = exports.sha256;\n    root.sha224 = exports.sha224;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n", "\"use strict\";var Module={};var ENVIRONMENT_IS_NODE=typeof process==\"object\"&&typeof process.versions==\"object\"&&typeof process.versions.node==\"string\";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require(\"worker_threads\");var parentPort=nodeWorkerThreads.parentPort;parentPort.on(\"message\",data=>onmessage({data:data}));var fs=require(\"fs\");var vm=[\"vm\"].map(require);Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:f=>vm.runInThisContext(fs.readFileSync(f,\"utf8\"),{filename:f}),postMessage:msg=>parentPort.postMessage(msg),performance:global.performance||{now:Date.now}})}var initializedJS=false;function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(\" \");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+\"\\n\");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(\" \");postMessage({cmd:\"alert\",text:text,threadId:Module[\"_pthread_self\"]()})}var err=threadPrintErr;self.alert=threadAlert;Module[\"instantiateWasm\"]=(info,receiveInstance)=>{var module=Module[\"wasmModule\"];Module[\"wasmModule\"]=null;var instance=new WebAssembly.Instance(module,info);return receiveInstance(instance)};self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd===\"load\"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{Module=instance;postMessage({\"cmd\":\"loaded\"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};Module[\"wasmModule\"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=(...args)=>{postMessage({cmd:\"callHandler\",handler:handler,args:args})}}Module[\"wasmMemory\"]=e.data.wasmMemory;Module[\"buffer\"]=Module[\"wasmMemory\"].buffer;Module[\"ENVIRONMENT_IS_PTHREAD\"]=true;if(typeof e.data.urlOrBlob==\"string\"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}DuckDB(Module)}else if(e.data.cmd===\"run\"){Module[\"__emscripten_thread_init\"](e.data.pthread_ptr,0,0,1);Module[\"__emscripten_thread_mailbox_await\"](e.data.pthread_ptr);Module[\"establishStackSpace\"]();Module[\"PThread\"].receiveObjectTransfer(e.data);Module[\"PThread\"].threadInitTLS();if(!initializedJS){initializedJS=true}try{Module[\"invokeEntryPoint\"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!=\"unwind\"){throw ex}}}else if(e.data.cmd===\"cancel\"){if(Module[\"_pthread_self\"]()){Module[\"__emscripten_thread_exit\"](-1)}}else if(e.data.target===\"setimmediate\"){}else if(e.data.cmd===\"checkMailbox\"){if(initializedJS){Module[\"checkMailbox\"]()}}else if(e.data.cmd){err(`worker.js received unknown command ${e.data.cmd}`);err(e.data)}}catch(ex){Module[\"__emscripten_thread_crashed\"]?.();throw ex}}self.onmessage=handleMessage;\n\nexport const onmessage = self.onmessage;\nexport function getModule() { return Module; }\nexport function setModule(m) { Module = m; }\n", "import * as pthread_api from '../bindings/duckdb-coi.pthread';\nimport DuckDB from '../bindings/duckdb-coi';\nimport { BROWSER_RUNTIME } from '../bindings/runtime_browser';\n\n// Register the global DuckDB runtime\nglobalThis.DUCKDB_RUNTIME = {};\nfor (const func of Object.getOwnPropertyNames(BROWSER_RUNTIME)) {\n    if (func == 'constructor') continue;\n    globalThis.DUCKDB_RUNTIME[func] = Object.getOwnPropertyDescriptor(BROWSER_RUNTIME, func)!.value;\n}\n\n// We just override the load handler of the pthread wrapper to bundle DuckDB with esbuild.\nglobalThis.onmessage = (e: any) => {\n    if (e.data.cmd === 'load') {\n        let m = pthread_api.getModule();\n\n        (globalThis as any).startWorker = (instance: any) => {\n            m = instance;\n            postMessage({ cmd: 'loaded' });\n        };\n        m['wasmModule'] = e.data.wasmModule;\n        m['wasmMemory'] = e.data.wasmMemory;\n        m['buffer'] = m['wasmMemory'].buffer;\n        m['ENVIRONMENT_IS_PTHREAD'] = true;\n        DuckDB(m).then((instance: any) => {\n            pthread_api.setModule(instance);\n        });\n    } else if (e.data.cmd === 'registerFileHandle') {\n        globalThis.DUCKDB_RUNTIME._files = globalThis.DUCKDB_RUNTIME._files || new Map();\n        globalThis.DUCKDB_RUNTIME._files.set(e.data.fileName, e.data.fileHandle);\n    } else if (e.data.cmd === 'dropFileHandle') {\n        globalThis.DUCKDB_RUNTIME._files = globalThis.DUCKDB_RUNTIME._files || new Map();\n        globalThis.DUCKDB_RUNTIME._files.delete(e.data.fileName);\n    } else if (e.data.cmd === 'registerUDFFunction') {\n        globalThis.DUCKDB_RUNTIME._udfFunctions = globalThis.DUCKDB_RUNTIME._files || new Map();\n        globalThis.DUCKDB_RUNTIME._udfFunctions.set(e.data.udf.name, e.data.udf);\n    } else if (e.data.cmd === 'dropUDFFunctions') {\n        globalThis.DUCKDB_RUNTIME._udfFunctions = globalThis.DUCKDB_RUNTIME._files || new Map();\n        for (const key of globalThis.DUCKDB_RUNTIME._udfFunctions.keys()) {\n            if (globalThis.DUCKDB_RUNTIME._udfFunctions.get(key).connection_id == e.data.connectionId) {\n                globalThis.DUCKDB_RUNTIME._udfFunctions.delete(key);\n            }\n        }\n    } else {\n        pthread_api.onmessage(e);\n    }\n};\n", "import {S3Config} from \"../bindings\";\nimport {sha256} from \"js-sha256\";\n\nexport interface S3Params {\n    url: string,\n    query: string,\n    host: string,\n    region: string,\n    service: string,\n    method: string,\n    accessKeyId: string,\n    secretAccessKey: string,\n    sessionToken: string,\n    dateNow: string,\n    datetimeNow: string\n}\n\nexport interface S3PayloadParams {\n    contentHash: string | null,\n    contentType: string | null\n}\n\nconst getHTTPHost = function (config : S3Config | undefined, url : string, bucket : string) : string {\n    if (config?.endpoint?.startsWith(\"http\")) {\n        // Endpoint is a full url, we append the bucket\n        const httpHost = `${config?.endpoint}`;\n        const offset = httpHost.indexOf(\"://\")+3;\n        return httpHost.substring(offset);\n    } else if (config?.endpoint) {\n        // Endpoint is not a full url and the https://{bucket}.{domain} format will be used\n        return `${bucket}.${config?.endpoint}`;\n    } else {\n        // Default aws s3 url\n        return `${bucket}.s3.amazonaws.com`;\n    }\n}\n\nexport function getS3Params (config : S3Config | undefined, url: string, method : string) : S3Params {\n    const parsedS3Url = parseS3Url(url);\n\n    // when using S3 path-style access, the signed URL should also include the bucket name, \n    //  as it is present in the HTTP URL path.\n    // See: https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-bucket-intro.html#path-style-url-ex\n    let path =  parsedS3Url.path;\n    if (isPathStyleAccess(config)) {\n        path = `/${parsedS3Url.bucket}${path}`;\n    }\n    return {\n        url: path,\n        query: \"\",\n        host: getHTTPHost(config, url, parsedS3Url.bucket),\n        region: (config?.region) ?? \"\",\n        service: \"s3\",\n        method: method,\n        accessKeyId: (config?.accessKeyId) ?? \"\",\n        secretAccessKey: (config?.secretAccessKey) ?? \"\",\n        sessionToken: (config?.sessionToken) ?? \"\",\n        dateNow: new Date().toISOString().replace(/-/g,'').split('T')[0],\n        datetimeNow: new Date().toISOString().replace(/-/g,'').replace(/:/g,'').split('.')[0]+ 'Z',\n    };\n}\n\nexport function uriEncode(input : string, encode_slash = false) {\n    // https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\n\n    const hexDigit = \"0123456789ABCDEF\";\n    let result = \"\";\n\n    for (let i = 0; i < input.length; i++) {\n        const ch : string = input[i];\n\n        if ((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9') || ch == '_' ||\n            ch == '-' || ch == '~' || ch == '.') {\n            result += ch;\n        } else if (ch == '/') {\n            if (encode_slash) {\n                result += \"%2F\";\n            } else {\n                result += ch;\n            }\n        } else {\n            result += \"%\";\n            result += hexDigit[ch.charCodeAt(0) >> 4];\n            result += hexDigit[ch.charCodeAt(0) & 15];\n        }\n    }\n    return result;\n}\n\nexport function createS3Headers(params: S3Params, payloadParams : S3PayloadParams | null = null) : Map<string, string> {\n    // this is the sha256 of the empty string, its useful since we have no payload for GET requests\n    const payloadHash = (payloadParams?.contentHash) ?? \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n\n    const res = new Map<string, string>();\n    // res.set(\"host\", params.host)\n    res.set(\"x-amz-date\", params.datetimeNow);\n    res.set(\"x-amz-content-sha256\", payloadHash);\n\n    if (params.sessionToken) {\n        res.set(\"x-amz-security-token\", params.sessionToken);\n    }\n\n    // construct string to sign\n    let signedHeaders = \"\";\n    if (payloadParams?.contentType) {\n        signedHeaders += \"content-type;\";\n    }\n    signedHeaders += \"host;x-amz-content-sha256;x-amz-date\";\n    if (params.sessionToken) {\n        signedHeaders += \";x-amz-security-token\";\n    }\n\n    let canonicalRequest = params.method + \"\\n\" + uriEncode(params.url) + \"\\n\" + params.query;\n    if (payloadParams?.contentType) {\n        canonicalRequest += \"\\ncontent-type:\" + payloadParams?.contentType;\n    }\n    canonicalRequest += \"\\nhost:\" + params.host +\n        \"\\nx-amz-content-sha256:\" + payloadHash + \"\\nx-amz-date:\" + params.datetimeNow;\n    if (params.sessionToken && params.sessionToken.length > 0) {\n        canonicalRequest += \"\\nx-amz-security-token:\" + params.sessionToken;\n    }\n\n    canonicalRequest += \"\\n\\n\" + signedHeaders + \"\\n\" + payloadHash;\n    const canonicalRequestHashStr = sha256(canonicalRequest);\n\n    const stringToSign = \"AWS4-HMAC-SHA256\\n\" + params.datetimeNow + \"\\n\" + params.dateNow + \"/\" + params.region + \"/\" + params.service +\n        \"/aws4_request\\n\" + canonicalRequestHashStr;\n\n    // ts-ignore's because library can accept array buffer as key, but TS arg is incorrect\n    const signKey = \"AWS4\" + params.secretAccessKey;\n    const kDate = sha256.hmac.arrayBuffer(signKey, params.dateNow);\n\n    // Note, js-sha256 has a bug in the TS interface that only supports strings as keys, while we need a bytearray\n    // as key. PR is open but unmerged: https://github.com/emn178/js-sha256/pull/25\n    // eslint-disable-next-line\n    // @ts-ignore\n    const kRegion = sha256.hmac.arrayBuffer(kDate, params.region);\n    // eslint-disable-next-line\n    // @ts-ignore\n    const kService = sha256.hmac.arrayBuffer(kRegion, params.service,);\n    // eslint-disable-next-line\n    // @ts-ignore\n    const signingKey = sha256.hmac.arrayBuffer(kService, \"aws4_request\");\n    // eslint-disable-next-line\n    // @ts-ignore\n    const signature = sha256.hmac(signingKey, stringToSign);\n\n    res.set(\"Authorization\", \"AWS4-HMAC-SHA256 Credential=\" + params.accessKeyId + \"/\" + params.dateNow + \"/\" + params.region + \"/\" +\n        params.service + \"/aws4_request, SignedHeaders=\" + signedHeaders +\n        \", Signature=\" + signature);\n\n    return res;\n}\n\nconst createS3HeadersFromS3Config = function (config : S3Config | undefined, url : string, method : string, contentType: string | null = null, payload : Uint8Array | null = null) : Map<string, string> {\n    const params = getS3Params(config, url, method);\n    const payloadParams = {\n        contentType: contentType,\n        contentHash: payload ? sha256.hex(payload!) : null\n    } as S3PayloadParams;\n    return createS3Headers(params, payloadParams);\n}\n\nexport function addS3Headers(xhr: XMLHttpRequest, config : S3Config | undefined, url : string, method: string, contentType: string | null = null, payload : Uint8Array | null = null) {\n    if (config?.accessKeyId || config?.sessionToken) {\n        const headers = createS3HeadersFromS3Config(config, url, method, contentType, payload);\n        headers.forEach((value: string, header: string) => {\n            xhr.setRequestHeader(header, value);\n        });\n\n        if (contentType) {\n            xhr.setRequestHeader(\"content-type\", contentType);\n        }\n    }\n}\n\nexport function parseS3Url (url: string) : {bucket : string, path : string} {\n    if (url.indexOf(\"s3://\") != 0) {\n        throw new Error(\"URL needs to start with s3://\");\n    }\n    const slashPos = url.indexOf('/', 5);\n\n    if (slashPos == -1) {\n        throw new Error(\"URL needs to contain a '/' after the host\");\n    }\n\n    const bucket = url.substring(5, slashPos);\n    if (!bucket) {\n        throw new Error(\"URL needs to contain a bucket name\");\n    }\n    const path = url.substring(slashPos);\n    if (!path) {\n        throw new Error(\"URL needs to contain key\");\n    }\n\n    return {bucket: bucket, path: path}\n}\n\nfunction isPathStyleAccess(config : S3Config | undefined) : boolean {\n    if (config?.endpoint?.startsWith(\"http\")) {\n        return true\n    }\n    return false\n}\n\nexport function getHTTPUrl(config : S3Config | undefined, url : string) : string {\n    const parsedUrl = parseS3Url(url);\n    if (isPathStyleAccess(config)) {\n        // Endpoint is a full url, we append the bucket\n        return `${config?.endpoint}/${parsedUrl.bucket}` + parsedUrl.path;\n    }\n    return 'https://' + getHTTPHost(config, url, parsedUrl.bucket) + parsedUrl.path;\n}", "import { DuckDBRuntime } from './runtime';\nimport { DuckDBModule } from './duckdb_module';\n\nconst TEXT_ENCODER = new TextEncoder();\nconst TEXT_DECODER = new TextDecoder('utf-8');\n\nfunction storeError(mod: DuckDBModule, response: number, message: string) {\n    const msgBuffer = TEXT_ENCODER.encode(message);\n    const heapAddr = mod._malloc(msgBuffer.byteLength);\n    const heapArray = mod.HEAPU8.subarray(heapAddr, heapAddr + msgBuffer.byteLength);\n    heapArray.set(msgBuffer);\n    mod.HEAPF64[(response >> 3) + 0] = 1;\n    mod.HEAPF64[(response >> 3) + 1] = heapAddr;\n    mod.HEAPF64[(response >> 3) + 2] = heapArray.byteLength;\n}\n\nfunction getTypeSize(ptype: string) {\n    switch (ptype) {\n        case 'UINT8':\n        case 'INT8':\n            return 1;\n        case 'INT32':\n        case 'FLOAT':\n            return 4;\n        case 'INT64':\n        case 'UINT64':\n        case 'DOUBLE':\n        case 'VARCHAR':\n            return 8;\n        default:\n            return 0;\n    }\n}\n\nfunction ptrToArray(mod: DuckDBModule, ptr: number, ptype: string, n: number) {\n    const heap = mod.HEAPU8.subarray(ptr, ptr + n * getTypeSize(ptype));\n    switch (ptype) {\n        case 'UINT8':\n            return new Uint8Array(heap.buffer, heap.byteOffset, n);\n        case 'INT8':\n            return new Int8Array(heap.buffer, heap.byteOffset, n);\n        case 'INT32':\n            return new Int32Array(heap.buffer, heap.byteOffset, n);\n        case 'FLOAT':\n            return new Float32Array(heap.buffer, heap.byteOffset, n);\n        case 'DOUBLE':\n            return new Float64Array(heap.buffer, heap.byteOffset, n);\n        case 'VARCHAR':\n            return new Float64Array(heap.buffer, heap.byteOffset, n);\n        default:\n            return new Array<string | undefined | null>(0); // cough\n    }\n}\n\nfunction ptrToUint8Array(mod: DuckDBModule, ptr: number, n: number) {\n    const heap = mod.HEAPU8.subarray(ptr, ptr + n);\n    return new Uint8Array(heap.buffer, heap.byteOffset, n);\n}\nfunction ptrToFloat64Array(mod: DuckDBModule, ptr: number, n: number) {\n    const heap = mod.HEAPU8.subarray(ptr, ptr + n * 8);\n    return new Float64Array(heap.buffer, heap.byteOffset, n);\n}\n\ninterface ArgumentTypeDescription {\n    name?: string;\n    sqlType: string;\n    physicalType: string;\n    validityBuffer?: number;\n    dataBuffer?: number;\n    lengthBuffer?: number;\n    children?: ArgumentTypeDescription[];\n}\n\ninterface ReturnTypeDescription {\n    sqlType: string;\n    physicalType: string;\n}\n\ninterface SchemaDescription {\n    rows: number;\n    args: ArgumentTypeDescription[];\n    ret: ReturnTypeDescription;\n}\n\ntype ArgumentResolver = (row: number) => any | null;\n\n// this is called from webdb.cc/CallScalarUDFFunction, changes here need to be matched there\nexport function callScalarUDF(\n    runtime: DuckDBRuntime,\n    mod: DuckDBModule,\n    response: number,\n    funcId: number,\n    descPtr: number,\n    descSize: number,\n    ptrsPtr: number,\n    ptrsSize: number,\n) {\n    try {\n        const udf = runtime._udfFunctions.get(funcId);\n        if (!udf) {\n            storeError(mod, response, 'Unknown UDF with id: ' + funcId);\n            return;\n        }\n        const rawDesc = TEXT_DECODER.decode(mod.HEAPU8.subarray(descPtr, descPtr + descSize));\n        const desc = JSON.parse(rawDesc) as SchemaDescription;\n        const ptrs = ptrToFloat64Array(mod, ptrsPtr, ptrsSize / 8);\n\n        const buildResolver = (arg: ArgumentTypeDescription): ArgumentResolver => {\n            let validity: Uint8Array | null = null;\n            if (arg.validityBuffer !== undefined) {\n                validity = ptrToUint8Array(mod, ptrs[arg.validityBuffer] as number, desc.rows);\n            }\n            switch (arg.physicalType) {\n                case 'VARCHAR': {\n                    if (arg.dataBuffer === null || arg.dataBuffer === undefined) {\n                        throw new Error('malformed data view, expected data buffer for VARCHAR argument');\n                    }\n                    if (arg.lengthBuffer === null || arg.lengthBuffer === undefined) {\n                        throw new Error('malformed data view, expected data length buffer for VARCHAR argument');\n                    }\n                    const raw = ptrToArray(mod, ptrs[arg.dataBuffer] as number, arg.physicalType, desc.rows);\n                    const strings: (string | null)[] = [];\n                    const stringLengths = ptrToFloat64Array(mod, ptrs[arg.lengthBuffer] as number, desc.rows);\n                    for (let j = 0; j < desc.rows; ++j) {\n                        if (validity != null && !validity[j]) {\n                            strings.push(null);\n                            continue;\n                        }\n                        const subarray = mod.HEAPU8.subarray(\n                            raw[j] as number,\n                            (raw[j] as number) + (stringLengths[j] as number),\n                        );\n                        const str = TEXT_DECODER.decode(subarray);\n                        strings.push(str);\n                    }\n                    return (row: number) => strings[row];\n                }\n                case 'STRUCT': {\n                    const tmp: any = {};\n                    const children: ArgumentResolver[] = [];\n                    for (let j = 0; j < (arg.children?.length || 0); ++j) {\n                        const attr = arg.children![j];\n                        const child = buildResolver(attr);\n                        children.push((row: number) => {\n                            tmp[attr.name!] = child(row);\n                        });\n                    }\n                    if (validity != null) {\n                        return (row: number) => {\n                            if (!validity![row]) {\n                                return null;\n                            }\n                            for (const resolver of children) {\n                                resolver(row);\n                            }\n                            return tmp;\n                        };\n                    } else {\n                        return (row: number) => {\n                            for (const resolver of children) {\n                                resolver(row);\n                            }\n                            return tmp;\n                        };\n                    }\n                }\n                default: {\n                    if (arg.dataBuffer === undefined) {\n                        throw new Error(\n                            'malformed data view, expected data buffer for argument of type: ' + arg.physicalType,\n                        );\n                    }\n                    const data = ptrToArray(mod, ptrs[arg.dataBuffer] as number, arg.physicalType, desc.rows);\n                    if (validity != null) {\n                        return (row: number) => (!validity![row] ? null : data[row]);\n                    } else {\n                        return (row: number) => data[row];\n                    }\n                }\n            }\n        };\n\n        // Translate argument data\n        const argResolvers = [];\n        for (let i = 0; i < desc.args.length; ++i) {\n            argResolvers.push(buildResolver(desc.args[i]));\n        }\n\n        // Prepare result buffers\n        // TODO: we probably do not want to recreate those every time\n        const resultDataLen = desc.rows * getTypeSize(desc.ret.physicalType);\n        const resultDataPtr = mod._malloc(resultDataLen);\n        const resultData = ptrToArray(mod, resultDataPtr, desc.ret.physicalType, desc.rows);\n        const resultValidityPtr = mod._malloc(desc.rows);\n        const resultValidity = ptrToUint8Array(mod, resultValidityPtr, desc.rows);\n        if (resultData.length == 0 || resultValidity.length == 0) {\n            storeError(mod, response, \"Can't create physical arrays for result\");\n            return;\n        }\n        let rawResultData = resultData;\n        if (desc.ret.physicalType == 'VARCHAR') {\n            rawResultData = new Array<string | undefined | null>(desc.rows);\n        }\n\n        // Call the function\n        const args = [];\n        for (let i = 0; i < desc.args.length; ++i) {\n            args.push(null);\n        }\n        for (let i = 0; i < desc.rows; ++i) {\n            for (let j = 0; j < desc.args.length; ++j) {\n                args[j] = argResolvers[j](i);\n            }\n            const res = udf.func(...args);\n            rawResultData[i] = res;\n            resultValidity[i] = res === undefined || res === null ? 0 : 1;\n        }\n\n        // Encode return values\n        let resultLengthsPtr = 0;\n        switch (desc.ret.physicalType) {\n            case 'VARCHAR': {\n                // Allocate result buffers\n                const resultDataUTF8 = new Array<Uint8Array>(0); // cough\n                resultLengthsPtr = mod._malloc(desc.rows * getTypeSize('DOUBLE'));\n                const resultLengths = ptrToFloat64Array(mod, resultLengthsPtr, desc.rows);\n\n                // TODO: We need two loops to figure out the total length but maybe we can avoid the double allocation\n                let totalLength = 0;\n                for (let row = 0; row < desc.rows; ++row) {\n                    const utf8 = TEXT_ENCODER.encode((rawResultData as (string | null | undefined)[])[row] || '');\n                    resultDataUTF8.push(utf8);\n                    resultLengths[row] = utf8.length;\n                    totalLength += utf8.length;\n                }\n\n                // We malloc a buffer for the strings to live in for now\n                const resultStringPtr = mod._malloc(totalLength);\n                const resultStringBuf = mod.HEAPU8.subarray(resultStringPtr, resultStringPtr + totalLength);\n\n                // Now copy all the strings to the new buffer back to back\n                let writerOffset = 0;\n                for (let row = 0; row < desc.rows; ++row) {\n                    resultData[row] = writerOffset;\n                    const resultUTF8 = resultDataUTF8[row];\n                    const writer = resultStringBuf.subarray(writerOffset, writerOffset + resultUTF8.length);\n                    writer.set(resultUTF8);\n                    writerOffset += resultUTF8.length;\n                }\n            }\n        }\n\n        // Need to store three pointers, data, validity and length\n        const retLen = 3 * 8;\n        const retPtr = mod._malloc(retLen);\n        const retBuffer = ptrToFloat64Array(mod, retPtr, 3);\n        retBuffer[0] = resultDataPtr;\n        retBuffer[1] = resultValidityPtr;\n        retBuffer[2] = resultLengthsPtr;\n\n        // Pack response\n        mod.HEAPF64[(response >> 3) + 0] = 0;\n        mod.HEAPF64[(response >> 3) + 1] = retPtr;\n        mod.HEAPF64[(response >> 3) + 2] = 0;\n    } catch (e: any) {\n        storeError(mod, response, e.toString());\n    }\n}\n", "import { DuckDBModule } from './duckdb_module';\nimport { UDFFunction } from './udf_function';\nimport * as udf_rt from './udf_runtime';\n\n/** Wrapper for TextDecoder to support shared array buffers */\nfunction TextDecoderWrapper(): (input?: BufferSource) => string {\n    const decoder = new TextDecoder();\n    return (data: any) => {\n        if (typeof SharedArrayBuffer !== 'undefined' && data.buffer instanceof SharedArrayBuffer) {\n            data = new Uint8Array(data);\n        }\n        return decoder.decode(data);\n    };\n}\n/** Helper to decode text */\nexport const decodeText = TextDecoderWrapper();\n\n/** Copy a buffer */\nexport function failWith(mod: DuckDBModule, msg: string): void {\n    console.error(`FAIL WITH: ${msg}`);\n    mod.ccall('duckdb_web_fail_with', null, ['string'], [msg]);\n}\n\n/** Copy a buffer */\nexport function copyBuffer(mod: DuckDBModule, begin: number, length: number): Uint8Array {\n    const buffer = mod.HEAPU8.subarray(begin, begin + length);\n    const copy = new Uint8Array(new ArrayBuffer(buffer.byteLength));\n    copy.set(buffer);\n    return copy;\n}\n\n/** Decode a string */\nexport function readString(mod: DuckDBModule, begin: number, length: number): string {\n    return decodeText(mod.HEAPU8.subarray(begin, begin + length));\n}\n\n/** The data protocol */\nexport enum DuckDBDataProtocol {\n    BUFFER = 0,\n    NODE_FS = 1,\n    BROWSER_FILEREADER = 2,\n    BROWSER_FSACCESS = 3,\n    HTTP = 4,\n    S3 = 5,\n}\n\n/** File flags for opening files*/\nexport enum FileFlags {\n    //! Open file with read access\n    FILE_FLAGS_READ = 1 << 0,\n    //! Open file with write access\n    FILE_FLAGS_WRITE = 1 << 1,\n    //! Use direct IO when reading/writing to the file\n    FILE_FLAGS_DIRECT_IO = 1 << 2,\n    //! Create file if not exists, can only be used together with WRITE\n    FILE_FLAGS_FILE_CREATE = 1 << 3,\n    //! Always create a new file. If a file exists, the file is truncated. Cannot be used together with CREATE.\n    FILE_FLAGS_FILE_CREATE_NEW = 1 << 4,\n    //! Open file in append mode\n    FILE_FLAGS_APPEND = 1 << 5,\n}\n\n/** Configuration for the AWS S3 Filesystem */\nexport interface S3Config {\n    region?: string;\n    endpoint?: string;\n    accessKeyId?: string;\n    secretAccessKey?: string;\n    sessionToken?: string;\n}\n\n/** An info for a file registered with DuckDB */\nexport interface DuckDBFileInfo {\n    cacheEpoch: number;\n    fileId: number;\n    fileName: string;\n    dataProtocol: DuckDBDataProtocol;\n    dataUrl: string | null;\n    allowFullHttpReads?: boolean;\n    s3Config?: S3Config;\n}\n\n/** Global info for all files registered with DuckDB */\nexport interface DuckDBGlobalFileInfo {\n    cacheEpoch: number;\n    allowFullHttpReads?: boolean;\n    s3Config?: S3Config;\n}\n\n/** Call a function with packed response buffer */\nexport function callSRet(\n    mod: DuckDBModule,\n    funcName: string,\n    argTypes: Array<Emscripten.JSType>,\n    args: Array<any>,\n): [number, number, number] {\n    const stackPointer = mod.stackSave();\n\n    // Allocate the packed response buffer\n    const response = mod.stackAlloc(3 * 8);\n    argTypes.unshift('number');\n    args.unshift(response);\n\n    // Do the call\n    mod.ccall(funcName, null, argTypes, args);\n\n    // Read the response\n    const status = mod.HEAPF64[(response >> 3) + 0];\n    const data = mod.HEAPF64[(response >> 3) + 1];\n    const dataSize = mod.HEAPF64[(response >> 3) + 2];\n\n    // Restore the stack\n    mod.stackRestore(stackPointer);\n    return [status, data, dataSize];\n}\n\n/** Drop response buffers */\nexport function dropResponseBuffers(mod: DuckDBModule): void {\n    mod.ccall('duckdb_web_clear_response', null, [], []);\n}\n\n/** The duckdb runtime */\nexport interface DuckDBRuntime {\n    _files?: Map<string, any>;\n    _udfFunctions: Map<number, UDFFunction>;\n\n    // Test a platform feature\n    testPlatformFeature(mod: DuckDBModule, feature: number): boolean;\n\n    // File APIs with dedicated file identifier\n    getDefaultDataProtocol(mod: DuckDBModule): number;\n    openFile(mod: DuckDBModule, fileId: number, flags: FileFlags): void;\n    syncFile(mod: DuckDBModule, fileId: number): void;\n    closeFile(mod: DuckDBModule, fileId: number): void;\n    getLastFileModificationTime(mod: DuckDBModule, fileId: number): number;\n    truncateFile(mod: DuckDBModule, fileId: number, newSize: number): void;\n    readFile(mod: DuckDBModule, fileId: number, buffer: number, bytes: number, location: number): number;\n    writeFile(mod: DuckDBModule, fileId: number, buffer: number, bytes: number, location: number): number;\n\n    // File APIs with path parameter\n    removeDirectory(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\n    checkDirectory(mod: DuckDBModule, pathPtr: number, pathLen: number): boolean;\n    createDirectory(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\n    listDirectoryEntries(mod: DuckDBModule, pathPtr: number, pathLen: number): boolean;\n    glob(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\n    moveFile(mod: DuckDBModule, fromPtr: number, fromLen: number, toPtr: number, toLen: number): void;\n    checkFile(mod: DuckDBModule, pathPtr: number, pathLen: number): boolean;\n    removeFile(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\n\n    // Call a scalar UDF function\n    callScalarUDF(\n        mod: DuckDBModule,\n        response: number,\n        funcId: number,\n        descPtr: number,\n        descSize: number,\n        ptrsPtr: number,\n        ptrsSize: number,\n    ): void;\n}\n\nexport const DEFAULT_RUNTIME: DuckDBRuntime = {\n    _udfFunctions: new Map(),\n\n    testPlatformFeature: (_mod: DuckDBModule, _feature: number): boolean => false,\n    getDefaultDataProtocol: (_mod: DuckDBModule): number => DuckDBDataProtocol.BUFFER,\n    openFile: (_mod: DuckDBModule, _fileId: number, flags: FileFlags): void => {},\n    syncFile: (_mod: DuckDBModule, _fileId: number): void => {},\n    closeFile: (_mod: DuckDBModule, _fileId: number): void => {},\n    getLastFileModificationTime: (_mod: DuckDBModule, _fileId: number): number => {\n        return 0;\n    },\n    truncateFile: (_mod: DuckDBModule, _fileId: number, _newSize: number): void => {},\n    readFile: (_mod: DuckDBModule, _fileId: number, _buffer: number, _bytes: number, _location: number): number => {\n        return 0;\n    },\n    writeFile: (_mod: DuckDBModule, _fileId: number, _buffer: number, _bytes: number, _location: number): number => {\n        return 0;\n    },\n\n    removeDirectory: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\n    checkDirectory: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): boolean => {\n        return false;\n    },\n    createDirectory: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\n    listDirectoryEntries: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): boolean => {\n        return false;\n    },\n    glob: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\n    moveFile: (_mod: DuckDBModule, _fromPtr: number, _fromLen: number, _toPtr: number, _toLen: number): void => {},\n    checkFile: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): boolean => {\n        return false;\n    },\n    removeFile: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\n    callScalarUDF: (\n        mod: DuckDBModule,\n        response: number,\n        funcId: number,\n        descPtr: number,\n        descSize: number,\n        ptrsPtr: number,\n        ptrsSize: number,\n    ): void => {\n        udf_rt.callScalarUDF(DEFAULT_RUNTIME, mod, response, funcId, descPtr, descSize, ptrsPtr, ptrsSize);\n    },\n};\n", "import { StatusCode } from '../status';\nimport { addS3Headers, getHTTPUrl } from '../utils';\n\nimport {\n    callSRet,\n    dropResponseBuffers,\n    DuckDBDataProtocol,\n    DuckDBFileInfo,\n    DuckDBGlobalFileInfo,\n    DuckDBRuntime,\n    failWith,\n    FileFlags,\n    readString,\n} from './runtime';\nimport { DuckDBModule } from './duckdb_module';\nimport * as udf from './udf_runtime';\n\nexport const BROWSER_RUNTIME: DuckDBRuntime & {\n    _fileInfoCache: Map<number, DuckDBFileInfo>;\n    _globalFileInfo: DuckDBGlobalFileInfo | null;\n\n    getFileInfo(mod: DuckDBModule, fileId: number): DuckDBFileInfo | null;\n    getGlobalFileInfo(mod: DuckDBModule): DuckDBGlobalFileInfo | null;\n} = {\n    _files: new Map<string, any>(),\n    _fileInfoCache: new Map<number, DuckDBFileInfo>(),\n    _udfFunctions: new Map(),\n    _globalFileInfo: null,\n\n    getFileInfo(mod: DuckDBModule, fileId: number): DuckDBFileInfo | null {\n        try {\n            const cached = BROWSER_RUNTIME._fileInfoCache.get(fileId);\n            const [s, d, n] = callSRet(\n                mod,\n                'duckdb_web_fs_get_file_info_by_id',\n                ['number', 'number'],\n                [fileId, cached?.cacheEpoch || 0],\n            );\n            if (s !== StatusCode.SUCCESS) {\n                return null;\n            } else if (n === 0) {\n                // Epoch is up to date\n                return cached!;\n            }\n            const infoStr = readString(mod, d, n);\n            dropResponseBuffers(mod);\n            const info = JSON.parse(infoStr);\n            if (info == null) {\n                return null;\n            }\n            const file = { ...info, blob: null } as DuckDBFileInfo;\n            BROWSER_RUNTIME._fileInfoCache.set(fileId, file);\n            return file;\n        } catch (e: any) {\n            console.log(e);\n            return null;\n        }\n    },\n\n    getGlobalFileInfo(mod: DuckDBModule): DuckDBGlobalFileInfo | null {\n        try {\n            const [s, d, n] = callSRet(\n                mod,\n                'duckdb_web_get_global_file_info',\n                ['number'],\n                [BROWSER_RUNTIME._globalFileInfo?.cacheEpoch || 0],\n            );\n            if (s !== StatusCode.SUCCESS) {\n                return null;\n            } else if (n === 0) {\n                // Epoch is up to date\n                return BROWSER_RUNTIME._globalFileInfo!;\n            }\n            const infoStr = readString(mod, d, n);\n            dropResponseBuffers(mod);\n            const info = JSON.parse(infoStr);\n            if (info == null) {\n                return null;\n            }\n            BROWSER_RUNTIME._globalFileInfo = { ...info, blob: null } as DuckDBGlobalFileInfo;\n\n            return BROWSER_RUNTIME._globalFileInfo;\n        } catch (e: any) {\n            console.log(e);\n            return null;\n        }\n    },\n\n    testPlatformFeature: (_mod: DuckDBModule, feature: number): boolean => {\n        switch (feature) {\n            case 1:\n                return typeof BigInt64Array !== 'undefined';\n            default:\n                console.warn(`test for unknown feature: ${feature}`);\n                return false;\n        }\n    },\n\n    getDefaultDataProtocol(mod: DuckDBModule): number {\n        return DuckDBDataProtocol.BROWSER_FILEREADER;\n    },\n\n    openFile: (mod: DuckDBModule, fileId: number, flags: FileFlags): number => {\n        try {\n            BROWSER_RUNTIME._fileInfoCache.delete(fileId);\n            const file = BROWSER_RUNTIME.getFileInfo(mod, fileId);\n            switch (file?.dataProtocol) {\n                case DuckDBDataProtocol.HTTP:\n                case DuckDBDataProtocol.S3: {\n                    if (flags & FileFlags.FILE_FLAGS_READ && flags & FileFlags.FILE_FLAGS_WRITE) {\n                        throw new Error(\n                            `Opening file ${file.fileName} failed: cannot open file with both read and write flags set`,\n                        );\n                    } else if (flags & FileFlags.FILE_FLAGS_APPEND) {\n                        throw new Error(\n                            `Opening file ${file.fileName} failed: appending to HTTP/S3 files is not supported`,\n                        );\n                    } else if (flags & FileFlags.FILE_FLAGS_WRITE) {\n                        // We send a HEAD request to try to determine if we can write to data_url\n                        const xhr = new XMLHttpRequest();\n                        if (file.dataProtocol == DuckDBDataProtocol.S3) {\n                            xhr.open('HEAD', getHTTPUrl(file.s3Config, file.dataUrl!), false);\n                            addS3Headers(xhr, file.s3Config, file.dataUrl!, 'HEAD');\n                        } else {\n                            xhr.open('HEAD', file.dataUrl!, false);\n                        }\n                        xhr.send(null);\n\n                        // Expect 200 for existing files that we will overwrite or 404 for non-existent files can be created\n                        if (xhr.status != 200 && xhr.status != 404) {\n                            throw new Error(\n                                `Opening file ${file.fileName} failed: Unexpected return status from server (${xhr.status})`,\n                            );\n                        } else if (\n                            xhr.status == 404 &&\n                            !(flags & FileFlags.FILE_FLAGS_FILE_CREATE || flags & FileFlags.FILE_FLAGS_FILE_CREATE_NEW)\n                        ) {\n                            throw new Error(\n                                `Opening file ${file.fileName} failed: Cannot write to non-existent file without FILE_FLAGS_FILE_CREATE or FILE_FLAGS_FILE_CREATE_NEW flag.`,\n                            );\n                        }\n                        // Return an empty buffer that can be used to buffer the writes to this s3/http file\n                        const data = mod._malloc(1);\n                        const src = new Uint8Array();\n                        mod.HEAPU8.set(src, data);\n                        const result = mod._malloc(2 * 8);\n                        mod.HEAPF64[(result >> 3) + 0] = 1;\n                        mod.HEAPF64[(result >> 3) + 1] = data;\n                        return result;\n                    } else if (flags != FileFlags.FILE_FLAGS_READ) {\n                        throw new Error(`Opening file ${file.fileName} failed: unsupported file flags: ${flags}`);\n                    }\n\n                    // Supports ranges?\n                    let contentLength = null;\n                    let error: any | null = null;\n                    try {\n                        // Send a dummy HEAD request with range protocol\n                        //          -> good IFF status is 206 and contentLenght is present\n                        const xhr = new XMLHttpRequest();\n                        if (file.dataProtocol == DuckDBDataProtocol.S3) {\n                            xhr.open('HEAD', getHTTPUrl(file.s3Config, file.dataUrl!), false);\n                            addS3Headers(xhr, file.s3Config, file.dataUrl!, 'HEAD');\n                        } else {\n                            xhr.open('HEAD', file.dataUrl!, false);\n                        }\n                        xhr.setRequestHeader('Range', `bytes=0-`);\n                        xhr.send(null);\n\n                        // Supports range requests\n                        contentLength = xhr.getResponseHeader('Content-Length');\n                        if (contentLength !== null && xhr.status == 206) {\n                            const result = mod._malloc(2 * 8);\n                            mod.HEAPF64[(result >> 3) + 0] = +contentLength;\n                            mod.HEAPF64[(result >> 3) + 1] = 0;\n                            return result;\n                        }\n                    } catch (e: any) {\n                        error = e;\n                        console.warn(`HEAD request with range header failed: ${e}`);\n                    }\n\n                    // Try to fallback to full read?\n                    if (file.allowFullHttpReads) {\n                        if ((contentLength !== null) && (+contentLength > 1)) {\n                            // 2. Send a dummy GET range request querying the first byte of the file\n                            //          -> good IFF status is 206 and contentLenght2 is 1\n                            //          -> otherwise, iff 200 and contentLenght2 == contentLenght\n                            //                 we just downloaded the file, save it and move further\n                            const xhr = new XMLHttpRequest();\n                            if (file.dataProtocol == DuckDBDataProtocol.S3) {\n                                xhr.open('GET', getHTTPUrl(file.s3Config, file.dataUrl!), false);\n                                addS3Headers(xhr, file.s3Config, file.dataUrl!, 'GET');\n                            } else {\n                                xhr.open('GET', file.dataUrl!, false);\n                            }\n                            xhr.responseType = 'arraybuffer';\n                            xhr.setRequestHeader('Range', `bytes=0-0`);\n                            xhr.send(null);\n                            const contentLength2 = xhr.getResponseHeader('Content-Length');\n\n                            if (xhr.status == 206 && contentLength2 !== null && +contentLength2 == 1) {\n                                const result = mod._malloc(2 * 8);\n                                mod.HEAPF64[(result >> 3) + 0] = +contentLength;\n                                mod.HEAPF64[(result >> 3) + 1] = 0;\n                                return result;\n                            }\n                            if (xhr.status == 200 && contentLength2 !== null && +contentLength2 == +contentLength) {\n                                console.warn(`fall back to full HTTP read for: ${file.dataUrl}`);\n                                const data = mod._malloc(xhr.response.byteLength);\n                                const src = new Uint8Array(xhr.response, 0, xhr.response.byteLength);\n                                mod.HEAPU8.set(src, data);\n                                const result = mod._malloc(2 * 8);\n                                mod.HEAPF64[(result >> 3) + 0] = xhr.response.byteLength;\n                                mod.HEAPF64[(result >> 3) + 1] = data;\n                                return result;\n                            }\n                        }\n                        console.warn(`falling back to full HTTP read for: ${file.dataUrl}`);\n                        // 3. Send non-range request\n                        const xhr = new XMLHttpRequest();\n                        if (file.dataProtocol == DuckDBDataProtocol.S3) {\n                            xhr.open('GET', getHTTPUrl(file.s3Config, file.dataUrl!), false);\n                            addS3Headers(xhr, file.s3Config, file.dataUrl!, 'GET');\n                        } else {\n                            xhr.open('GET', file.dataUrl!, false);\n                        }\n                        xhr.responseType = 'arraybuffer';\n                        xhr.send(null);\n\n                        // Return buffer\n                        if (xhr.status == 200) {\n                            const data = mod._malloc(xhr.response.byteLength);\n                            const src = new Uint8Array(xhr.response, 0, xhr.response.byteLength);\n                            mod.HEAPU8.set(src, data);\n                            const result = mod._malloc(2 * 8);\n                            mod.HEAPF64[(result >> 3) + 0] = xhr.response.byteLength;\n                            mod.HEAPF64[(result >> 3) + 1] = data;\n                            return result;\n                        }\n                    }\n\n                    // Raise error?\n                    if (error != null) {\n                        throw new Error(`Reading file ${file.fileName} failed with error: ${error}`);\n                    }\n                    return 0;\n                }\n                // File reader File\n                case DuckDBDataProtocol.BROWSER_FILEREADER: {\n                    const handle = BROWSER_RUNTIME._files?.get(file.fileName);\n                    if (handle) {\n                        const result = mod._malloc(2 * 8);\n                        mod.HEAPF64[(result >> 3) + 0] = handle.size;\n                        mod.HEAPF64[(result >> 3) + 1] = 0;\n                        return result;\n                    }\n\n                    // Fall back to empty buffered file in the browser\n                    console.warn(`Buffering missing file: ${file.fileName}`);\n                    const result = mod._malloc(2 * 8);\n                    const buffer = mod._malloc(1); // malloc(0) is allowed to return a nullptr\n                    mod.HEAPF64[(result >> 3) + 0] = 1;\n                    mod.HEAPF64[(result >> 3) + 1] = buffer;\n                    return result;\n                }\n            }\n        } catch (e: any) {\n            // TODO (samansmink): this path causes the WASM code to hang\n            console.error(e.toString());\n            failWith(mod, e.toString());\n        }\n        return 0;\n    },\n    glob: (mod: DuckDBModule, pathPtr: number, pathLen: number) => {\n        try {\n            const path = readString(mod, pathPtr, pathLen);\n            // Starts with http?\n            // Try a HTTP HEAD request\n            if (path.startsWith('http') || path.startsWith('s3://')) {\n                // Send a dummy range request querying the first byte of the file\n                const xhr = new XMLHttpRequest();\n                if (path.startsWith('s3://')) {\n                    const globalInfo = BROWSER_RUNTIME.getGlobalFileInfo(mod);\n                    xhr.open('HEAD', getHTTPUrl(globalInfo?.s3Config, path), false);\n                    addS3Headers(xhr, globalInfo?.s3Config, path, 'HEAD');\n                } else {\n                    xhr.open('HEAD', path!, false);\n                }\n                xhr.send(null);\n                if (xhr.status != 200 && xhr.status !== 206) {\n                    // Pre-signed resources on S3 in common configurations fail on any HEAD request\n                    // https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/s3-example-presigned-urls.html\n                    // so we need (if enabled) to bump to a ranged GET\n                    if (!BROWSER_RUNTIME.getGlobalFileInfo(mod)?.allowFullHttpReads) {\n                        failWith(mod, `HEAD request failed: ${path}, with full http reads are disabled`);\n                        return;\n                    }\n                    const xhr2 = new XMLHttpRequest();\n                    if (path.startsWith('s3://')) {\n                        const globalInfo = BROWSER_RUNTIME.getGlobalFileInfo(mod);\n                        xhr2.open('GET', getHTTPUrl(globalInfo?.s3Config, path), false);\n                        addS3Headers(xhr2, globalInfo?.s3Config, path, 'HEAD');\n                    } else {\n                        xhr2.open('GET', path!, false);\n                    }\n                    xhr2.setRequestHeader('Range', `bytes=0-0`);\n                    xhr2.send(null);\n                    if (xhr2.status != 200 && xhr2.status !== 206) {\n                        failWith(mod, `HEAD and GET requests failed: ${path}`);\n                        return;\n                    }\n                    const contentLength = xhr2.getResponseHeader('Content-Length');\n                    if (contentLength && (+contentLength > 1)) {\n                        console.warn(`Range request for ${path} did not return a partial response: ${xhr2.status} \"${xhr2.statusText}\"`);\n                    }\n                }\n                mod.ccall('duckdb_web_fs_glob_add_path', null, ['string'], [path]);\n            }\n        } catch (e: any) {\n            console.log(e);\n            failWith(mod, e.toString());\n            return 0;\n        }\n    },\n    checkFile: (mod: DuckDBModule, pathPtr: number, pathLen: number): boolean => {\n        try {\n            const path = readString(mod, pathPtr, pathLen);\n            // Starts with http or S3?\n            // Try a HTTP HEAD request\n            if (path.startsWith('http') || path.startsWith('s3://')) {\n                // Send a dummy range request querying the first byte of the file\n                const xhr = new XMLHttpRequest();\n                if (path.startsWith('s3://')) {\n                    const globalInfo = BROWSER_RUNTIME.getGlobalFileInfo(mod);\n                    xhr.open('HEAD', getHTTPUrl(globalInfo?.s3Config, path), false);\n                    addS3Headers(xhr, globalInfo?.s3Config, path, 'HEAD');\n                } else {\n                    xhr.open('HEAD', path!, false);\n                }\n                xhr.send(null);\n                return xhr.status == 206 || xhr.status == 200;\n            }\n        } catch (e: any) {\n            console.log(e);\n            return false;\n        }\n        return false;\n    },\n    syncFile: (_mod: DuckDBModule, _fileId: number) => {},\n    closeFile: (mod: DuckDBModule, fileId: number) => {\n        const file = BROWSER_RUNTIME.getFileInfo(mod, fileId);\n        BROWSER_RUNTIME._fileInfoCache.delete(fileId);\n        switch (file?.dataProtocol) {\n            case DuckDBDataProtocol.BUFFER:\n            case DuckDBDataProtocol.HTTP:\n            case DuckDBDataProtocol.S3:\n                break;\n            case DuckDBDataProtocol.NODE_FS:\n            case DuckDBDataProtocol.BROWSER_FILEREADER:\n                // XXX Remove from registry\n                return;\n            case DuckDBDataProtocol.BROWSER_FSACCESS: {\n                const handle = BROWSER_RUNTIME._files?.get(file.fileName);\n                if (!handle) {\n                    throw new Error(`No OPFS access handle registered with name: ${file.fileName}`);\n                }\n                return handle.flush();\n            }\n        }\n    },\n    truncateFile: (mod: DuckDBModule, fileId: number, newSize: number) => {\n        const file = BROWSER_RUNTIME.getFileInfo(mod, fileId);\n        switch (file?.dataProtocol) {\n            case DuckDBDataProtocol.HTTP:\n                failWith(mod, `Cannot truncate a http file`);\n                return;\n            case DuckDBDataProtocol.S3:\n                failWith(mod, `Cannot truncate an s3 file`);\n                return;\n            case DuckDBDataProtocol.BUFFER:\n            case DuckDBDataProtocol.NODE_FS:\n            case DuckDBDataProtocol.BROWSER_FILEREADER:\n                failWith(mod, `truncateFile not implemented`);\n                return;\n            case DuckDBDataProtocol.BROWSER_FSACCESS: {\n                const handle = BROWSER_RUNTIME._files?.get(file.fileName);\n                if (!handle) {\n                    throw new Error(`No OPFS access handle registered with name: ${file.fileName}`);\n                }\n                return handle.truncate(newSize);\n            }\n        }\n        return 0;\n    },\n    readFile(mod: DuckDBModule, fileId: number, buf: number, bytes: number, location: number) {\n        if (bytes == 0) {\n            // Be robust to empty reads\n            return 0;\n        }\n        try {\n            const file = BROWSER_RUNTIME.getFileInfo(mod, fileId);\n            switch (file?.dataProtocol) {\n                // File reading from BLOB or HTTP MUST be done with range requests.\n                // We have to check in OPEN if such file supports range requests and upgrade to BUFFER if not.\n                case DuckDBDataProtocol.HTTP:\n                case DuckDBDataProtocol.S3: {\n                    if (!file.dataUrl) {\n                        throw new Error(`Missing data URL for file ${fileId}`);\n                    }\n                    try {\n                        const xhr = new XMLHttpRequest();\n                        if (file.dataProtocol == DuckDBDataProtocol.S3) {\n                            xhr.open('GET', getHTTPUrl(file?.s3Config, file.dataUrl!), false);\n                            addS3Headers(xhr, file?.s3Config, file.dataUrl!, 'GET');\n                        } else {\n                            xhr.open('GET', file.dataUrl!, false);\n                        }\n                        xhr.responseType = 'arraybuffer';\n                        xhr.setRequestHeader('Range', `bytes=${location}-${location + bytes - 1}`);\n                        xhr.send(null);\n                        if (\n                            xhr.status == 206 /* Partial content */ ||\n                            (xhr.status == 200 && bytes == xhr.response.byteLength && location == 0)\n                        ) {\n                            const src = new Uint8Array(xhr.response, 0, Math.min(xhr.response.byteLength, bytes));\n                            mod.HEAPU8.set(src, buf);\n                            return src.byteLength;\n                        } else if (xhr.status == 200) {\n                            // TODO: here we are actually throwing away all non-relevant bytes, but this is still better than failing\n                            //       proper solution would require notifying duckdb-wasm cache, while we are piggybackign on browser cache\n                            console.warn(`Range request for ${file.dataUrl} did not return a partial response: ${xhr.status} \"${xhr.statusText}\"`);\n                            const src = new Uint8Array(xhr.response, location, Math.min(xhr.response.byteLength-location, bytes));\n                            mod.HEAPU8.set(src, buf);\n                            return src.byteLength;\n                        } else {\n                            throw new Error(\n                                `Range request for ${file.dataUrl} did returned non-success status: ${xhr.status} \"${xhr.statusText}\"`,\n                            );\n                        }\n                    } catch (e) {\n                        console.log(e);\n                        throw new Error(`Range request for ${file.dataUrl} failed with error: ${e}\"`);\n                    }\n                }\n                case DuckDBDataProtocol.BROWSER_FILEREADER: {\n                    const handle = BROWSER_RUNTIME._files?.get(file.fileName);\n                    if (!handle) {\n                        throw new Error(`No HTML5 file registered with name: ${file.fileName}`);\n                    }\n                    const sliced = handle!.slice(location, location + bytes);\n                    const data = new Uint8Array(new FileReaderSync().readAsArrayBuffer(sliced));\n                    mod.HEAPU8.set(data, buf);\n                    return data.byteLength;\n                }\n                case DuckDBDataProtocol.BROWSER_FSACCESS: {\n                    const handle = BROWSER_RUNTIME._files?.get(file.fileName);\n                    if (!handle) {\n                        throw new Error(`No OPFS access handle registered with name: ${file.fileName}`);\n                    }\n                    const out = mod.HEAPU8.subarray(buf, buf + bytes);\n                    return handle.read(out, { at: location });\n                }\n            }\n            return 0;\n        } catch (e: any) {\n            console.log(e);\n            failWith(mod, e.toString());\n            return 0;\n        }\n    },\n    writeFile: (mod: DuckDBModule, fileId: number, buf: number, bytes: number, location: number) => {\n        const file = BROWSER_RUNTIME.getFileInfo(mod, fileId);\n        switch (file?.dataProtocol) {\n            case DuckDBDataProtocol.HTTP:\n                failWith(mod, 'Cannot write to HTTP file');\n                return 0;\n            case DuckDBDataProtocol.S3: {\n                const buffer = mod.HEAPU8.subarray(buf, buf + bytes);\n                const xhr = new XMLHttpRequest();\n                xhr.open('PUT', getHTTPUrl(file?.s3Config, file.dataUrl!), false);\n                addS3Headers(xhr, file?.s3Config, file.dataUrl!, 'PUT', '', buffer);\n                xhr.send(buffer);\n                if (xhr.status !== 200) {\n                    failWith(mod, 'Failed writing file: HTTP ' + xhr.status);\n                    return 0;\n                }\n                return bytes;\n            }\n            case DuckDBDataProtocol.BROWSER_FILEREADER:\n                failWith(mod, 'cannot write using the html5 file reader api');\n                return 0;\n            case DuckDBDataProtocol.BROWSER_FSACCESS: {\n                const handle = BROWSER_RUNTIME._files?.get(file.fileName);\n                if (!handle) {\n                    throw new Error(`No OPFS access handle registered with name: ${file.fileName}`);\n                }\n                const input = mod.HEAPU8.subarray(buf, buf + bytes);\n                return handle.write(input, { at: location });\n            }\n        }\n        return 0;\n    },\n    getLastFileModificationTime: (mod: DuckDBModule, fileId: number) => {\n        const file = BROWSER_RUNTIME.getFileInfo(mod, fileId);\n        switch (file?.dataProtocol) {\n            case DuckDBDataProtocol.BROWSER_FILEREADER: {\n                const handle = BROWSER_RUNTIME._files?.get(file.fileName);\n                if (!handle) {\n                    throw Error(`No handle available for file: ${file.fileName}`);\n                }\n                return 0;\n            }\n\n            case DuckDBDataProtocol.HTTP:\n            case DuckDBDataProtocol.S3:\n                return new Date().getTime();\n        }\n        return 0;\n    },\n    checkDirectory: (mod: DuckDBModule, pathPtr: number, pathLen: number) => {\n        const path = readString(mod, pathPtr, pathLen);\n        console.log(`checkDirectory: ${path}`);\n        return false;\n    },\n    createDirectory: (mod: DuckDBModule, pathPtr: number, pathLen: number) => {\n        const path = readString(mod, pathPtr, pathLen);\n        console.log(`createDirectory: ${path}`);\n    },\n    removeDirectory: (mod: DuckDBModule, pathPtr: number, pathLen: number) => {\n        const path = readString(mod, pathPtr, pathLen);\n        console.log(`removeDirectory: ${path}`);\n    },\n    listDirectoryEntries: (mod: DuckDBModule, pathPtr: number, pathLen: number) => {\n        const path = readString(mod, pathPtr, pathLen);\n        console.log(`listDirectoryEntries: ${path}`);\n        return false;\n    },\n    moveFile: (mod: DuckDBModule, fromPtr: number, fromLen: number, toPtr: number, toLen: number) => {\n        const from = readString(mod, fromPtr, fromLen);\n        const to = readString(mod, toPtr, toLen);\n        const handle = BROWSER_RUNTIME._files?.get(from);\n        if (handle !== undefined) {\n            BROWSER_RUNTIME._files!.delete(handle);\n            BROWSER_RUNTIME._files!.set(to, handle);\n        }\n        for (const [key, value] of BROWSER_RUNTIME._fileInfoCache?.entries() || []) {\n            if (value.dataUrl == from) {\n                BROWSER_RUNTIME._fileInfoCache.delete(key);\n                break;\n            }\n        }\n        return true;\n    },\n    removeFile: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number) => {},\n    callScalarUDF: (\n        mod: DuckDBModule,\n        response: number,\n        funcId: number,\n        descPtr: number,\n        descSize: number,\n        ptrsPtr: number,\n        ptrsSize: number,\n    ): void => {\n        udf.callScalarUDF(BROWSER_RUNTIME, mod, response, funcId, descPtr, descSize, ptrsPtr, ptrsSize);\n    },\n};\n\nexport default BROWSER_RUNTIME;\n"],
  "mappings": "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",
  "names": ["require_duckdb_coi", "__commonJSMin", "exports", "module", "DuckDB", "_scriptDir", "moduleArg", "GROWABLE_HEAP_I8", "wasmMemory", "HEAP8", "updateMemoryViews", "GROWABLE_HEAP_U8", "HEAPU8", "GROWABLE_HEAP_I16", "HEAP16", "GROWABLE_HEAP_U16", "HEAPU16", "GROWABLE_HEAP_I32", "HEAP32", "GROWABLE_HEAP_U32", "HEAPU32", "GROWABLE_HEAP_F64", "HEAPF64", "Module", "readyPromiseResolve", "readyPromiseReject", "resolve", "reject", "moduleOverrides", "arguments_", "thisProgram", "quit_", "status", "toThrow", "ENVIRONMENT_IS_WEB", "ENVIRONMENT_IS_WORKER", "ENVIRONMENT_IS_NODE", "ENVIRONMENT_IS_PTHREAD", "scriptDirectory", "locateFile", "path", "read_", "readAsync", "readBinary", "fs", "nodePath", "filename", "binary", "isFileURI", "ret", "onload", "onerror", "err", "data", "url", "xhr", "defaultPrint", "defaultPrintErr", "args", "out", "wasmBinary", "abort", "wasmModule", "ABORT", "EXITSTATUS", "assert", "condition", "text", "HEAPF32", "b", "INITIAL_MEMORY", "__ATPRERUN__", "__ATINIT__", "__ATMAIN__", "__ATPOSTRUN__", "runtimeInitialized", "preRun", "addOnPreRun", "callRuntimeCallbacks", "initRuntime", "preMain", "postRun", "addOnPostRun", "cb", "addOnInit", "runDependencies", "runDependencyWatcher", "dependenciesFulfilled", "addRunDependency", "id", "_a", "removeRunDependency", "callback", "what", "e", "dataURIPrefix", "isDataURI", "wasmBinaryFile", "getBinarySync", "file", "getBinaryPromise", "binaryFile", "response", "instantiateArrayBuffer", "imports", "receiver", "instance", "reason", "instantiateAsync", "result", "createWasm", "info", "wasmImports", "receiveInstance", "wasmExports", "applySignatureConversions", "registerTLSInit", "wasmTable", "receiveInstantiationResult", "tempDouble", "tempI64", "ExitStatus", "terminateWorker", "worker", "killThread", "pthread_ptr", "PThread", "cancelThread", "cleanupThread", "zeroMemory", "address", "size", "spawnThread", "threadParams", "msg", "runtimeKeepaliveCounter", "keepRuntimeAlive", "noExitRuntime", "UTF8Decoder", "UTF8ArrayToString", "heapOrArray", "idx", "maxBytesToRead", "endIdx", "endPtr", "str", "u0", "u1", "u2", "ch", "UTF8ToString", "ptr", "SYSCALLS", "withStackSave", "f", "stack", "stackSave", "stackRestore", "convertI32PairToI53Checked", "lo", "hi", "proxyToMainThread", "index", "sync", "numCallArgs", "outerArgs", "serializedNumCallArgs", "stackAlloc", "i", "arg", "_proc_exit", "code", "exitJS", "implicit", "exitOnMainThread", "_exit", "handleException", "pthreadPoolSize", "onFinishedLoading", "cmd", "targetWorker", "checkMailbox", "message", "handlers", "knownHandlers", "handler", "onMaybeReady", "pthreadMainJs", "callbacks", "establishStackSpace", "stackHigh", "stackSize", "stackLow", "returnCode", "wasmTableMirror", "getWasmTableEntry", "funcPtr", "func", "invokeEntryPoint", "finish", "tlsInitFunc", "___emscripten_init_main_thread_js", "tb", "___emscripten_thread_cleanup", "thread", "pthreadCreateProxied", "attr", "startRoutine", "___pthread_create_js", "transferList", "error", "___syscall__newselect", "nfds", "readfds", "writefds", "exceptfds", "timeout", "total", "srcReadLow", "srcReadHigh", "srcWriteLow", "srcWriteHigh", "srcExceptLow", "srcExceptHigh", "dstReadLow", "dstReadHigh", "dstWriteLow", "dstWriteHigh", "dstExceptLow", "dstExceptHigh", "allLow", "allHigh", "check", "fd", "low", "high", "val", "mask", "stream", "flags", "timeoutInMillis", "tv_sec", "tv_usec", "SOCKFS", "FS", "getSocketFromFD", "socket", "inetNtop4", "addr", "inetNtop6", "ints", "word", "longest", "lastzero", "zstart", "len", "parts", "hasipv4", "v4part", "readSockaddr", "sa", "salen", "family", "port", "inetPton4", "tmp", "jstoi_q", "inetPton6", "words", "w", "offset", "z", "valid6regx", "DNS", "name", "res", "getSocketAddress", "addrp", "addrlen", "allowNull", "___syscall_bind", "d1", "d2", "d3", "sock", "___syscall_connect", "___syscall_faccessat", "dirfd", "amode", "___syscall_fcntl64", "varargs", "___syscall_fstat64", "buf", "___syscall_ftruncate64", "length_low", "length_high", "length", "stringToUTF8Array", "heap", "outIdx", "maxBytesToWrite", "startIdx", "u", "stringToUTF8", "outPtr", "___syscall_getdents64", "dirp", "count", "writeSockaddr", "___syscall_getpeername", "errno", "___syscall_getsockopt", "level", "optname", "optval", "optlen", "___syscall_ioctl", "op", "___syscall_lstat64", "___syscall_mkdirat", "mode", "___syscall_newfstatat", "___syscall_openat", "___syscall_recvfrom", "___syscall_renameat", "olddirfd", "oldpath", "newdirfd", "newpath", "___syscall_rmdir", "___syscall_sendto", "addr_len", "___syscall_socket", "domain", "type", "protocol", "___syscall_stat64", "___syscall_unlinkat", "nowIsMonotonic", "__emscripten_get_now_is_monotonic", "maybeExit", "callUserCallback", "__emscripten_thread_mailbox_await", "wait", "waitingAsync", "__emscripten_notify_mailbox_postmessage", "targetThreadId", "currThreadId", "mainThreadId", "proxiedJSCallArgs", "__emscripten_receive_on_main_thread_js", "callingThread", "proxiedFunctionTable", "rtn", "__emscripten_thread_set_strongref", "_abort", "_duckdb_web_fs_directory_create", "pathLen", "_duckdb_web_fs_directory_exists", "_duckdb_web_fs_directory_list_files", "_duckdb_web_fs_directory_remove", "_duckdb_web_fs_file_close", "fileId", "_duckdb_web_fs_file_exists", "_duckdb_web_fs_file_get_last_modified_time", "_duckdb_web_fs_file_move", "from", "fromLen", "to", "toLen", "_duckdb_web_fs_file_open", "_duckdb_web_fs_file_read", "location", "_duckdb_web_fs_file_truncate", "newSize", "_duckdb_web_fs_file_write", "_duckdb_web_fs_get_default_data_protocol", "_duckdb_web_fs_glob", "_duckdb_web_test_platform_feature", "feature", "_duckdb_web_udf_scalar_call", "funcId", "descPtr", "descSize", "ptrsPtr", "ptrsSize", "warnOnce", "_emscripten_check_blocking_allowed", "_emscripten_date_now", "runtimeKeepalivePush", "_emscripten_exit_with_live_runtime", "getHeapMax", "_emscripten_get_heap_max", "_emscripten_get_now", "_emscripten_num_logical_cores", "growMemory", "pages", "_emscripten_resize_heap", "requestedSize", "oldSize", "maxHeapSize", "alignUp", "x", "multiple", "cutDown", "overGrownHeapSize", "replacement", "ENV", "getExecutableName", "getEnvStrings", "lang", "env", "strings", "stringToAscii", "buffer", "_environ_get", "__environ", "environ_buf", "bufSize", "string", "_environ_sizes_get", "penviron_count", "penviron_buf_size", "_fd_close", "_fd_fdstat_get", "pbuf", "rightsBase", "rightsInheriting", "_fd_pread", "iov", "iovcnt", "offset_low", "offset_high", "pnum", "_fd_pwrite", "_fd_read", "_fd_seek", "whence", "newOffset", "_fd_sync", "printCharBuffers", "printChar", "curr", "_fd_write", "num", "j", "_getaddrinfo", "node", "service", "hint", "proto", "ai", "allocaddrinfo", "canon", "_malloc", "initRandomFill", "view", "crypto_module", "randomFillSync", "randomBytes", "randomFill", "_getentropy", "_getnameinfo", "nodelen", "serv", "servlen", "overflowed", "lookup", "numBytesWrittenExclNull", "isLeapYear", "year", "arraySum", "array", "sum", "MONTH_DAYS_LEAP", "MONTH_DAYS_REGULAR", "addDays", "date", "days", "newDate", "leap", "currentMonth", "daysInCurrentMonth", "lengthBytesUTF8", "c", "intArrayFromString", "stringy", "dontAddNull", "u8array", "numBytesWritten", "writeArrayToMemory", "_strftime", "s", "maxsize", "format", "tm", "tm_zone", "pattern", "EXPANSION_RULES_1", "rule", "WEEKDAYS", "MONTHS", "leadingSomething", "value", "digits", "character", "leadingNulls", "compareByDay", "date1", "date2", "sgn", "compare", "getFirstWeekStartDate", "janFourth", "getWeekBasedYear", "thisDate", "janFourthThisYear", "janFourthNextYear", "firstWeekStartThisYear", "firstWeekStartNextYear", "EXPANSION_RULES_2", "twelveHour", "jan1", "dec31", "off", "ahead", "bytes", "_strftime_l", "loc", "getCFunc", "ident", "stringToUTF8OnStack", "ccall", "returnType", "argTypes", "opts", "toC", "arr", "convertReturnValue", "cArgs", "converter", "onDone", "_main", "a0", "a1", "_duckdb_web_fs_glob_add_path", "_duckdb_web_clear_response", "_duckdb_web_fail_with", "_duckdb_web_reset", "_duckdb_web_connect", "_duckdb_web_disconnect", "_duckdb_web_flush_files", "_duckdb_web_flush_file", "_duckdb_web_open", "_duckdb_web_get_global_file_info", "_duckdb_web_collect_file_stats", "a2", "_duckdb_web_export_file_stats", "_duckdb_web_fs_drop_file", "_duckdb_web_fs_drop_files", "_duckdb_web_fs_glob_file_infos", "_duckdb_web_fs_get_file_info_by_id", "_duckdb_web_fs_get_file_info_by_name", "_duckdb_web_fs_register_file_url", "a3", "a4", "_duckdb_web_fs_register_file_buffer", "_duckdb_web_copy_file_to_buffer", "_duckdb_web_copy_file_to_path", "_duckdb_web_get_version", "_duckdb_web_get_feature_flags", "_duckdb_web_tokenize", "_duckdb_web_udf_scalar_create", "_duckdb_web_prepared_create", "_duckdb_web_prepared_close", "_duckdb_web_prepared_run", "_duckdb_web_prepared_send", "_duckdb_web_query_run", "_duckdb_web_pending_query_start", "_duckdb_web_pending_query_poll", "_duckdb_web_pending_query_cancel", "_duckdb_web_query_fetch_results", "_duckdb_web_get_tablenames", "_duckdb_web_insert_arrow_from_ipc_stream", "_duckdb_web_insert_csv_from_path", "_duckdb_web_insert_json_from_path", "_free", "makeWrapper_p", "makeWrapper_pp", "calledRun", "runCaller", "run", "callMain", "entryFunction", "argc", "argv", "doRun", "shouldRunNow", "require_sha256", "__commonJSMin", "exports", "module", "ERROR", "WINDOW", "root", "WEB_WORKER", "NODE_JS", "COMMON_JS", "AMD", "ARRAY_BUFFER", "HEX_CHARS", "EXTRA", "SHIFT", "K", "OUTPUT_TYPES", "blocks", "obj", "createOutputMethod", "outputType", "is224", "message", "Sha256", "createMethod", "method", "nodeWrap", "i", "type", "crypto", "Buffer", "algorithm", "bufferFrom", "nodeMethod", "createHmacOutputMethod", "key", "HmacSha256", "createHmacMethod", "sharedMemory", "notString", "code", "index", "length", "a", "b", "c", "d", "e", "f", "g", "h", "j", "s0", "s1", "maj", "t1", "t2", "ch", "ab", "da", "cd", "bc", "h0", "h1", "h2", "h3", "h4", "h5", "h6", "h7", "hex", "arr", "buffer", "dataView", "bytes", "oKeyPad", "iKeyPad", "innerHash", "Module", "ENVIRONMENT_IS_NODE", "nodeWorkerThreads", "parentPort", "data", "onmessage", "fs", "vm", "__require", "f", "msg", "initializedJS", "threadPrintErr", "text", "threadAlert", "err", "info", "receiveInstance", "module", "instance", "e", "handleMessage", "_a", "messageQueue", "handler", "args", "objectUrl", "ex", "getModule", "setModule", "m", "import_duckdb_coi", "import_js_sha256", "getHTTPHost", "config", "url", "bucket", "_a", "httpHost", "offset", "getS3Params", "method", "_b", "_c", "_d", "parsedS3Url", "parseS3Url", "path", "isPathStyleAccess", "uriEncode", "input", "encode_slash", "hexDigit", "result", "i", "ch", "createS3Headers", "params", "payloadParams", "payloadHash", "res", "signedHeaders", "canonicalRequest", "canonicalRequestHashStr", "stringToSign", "signKey", "kDate", "kRegion", "kService", "signingKey", "signature", "createS3HeadersFromS3Config", "contentType", "payload", "addS3Headers", "xhr", "value", "header", "slashPos", "getHTTPUrl", "parsedUrl", "TEXT_ENCODER", "TEXT_DECODER", "storeError", "mod", "response", "message", "msgBuffer", "heapAddr", "heapArray", "getTypeSize", "ptype", "ptrToArray", "ptr", "n", "heap", "ptrToUint8Array", "ptrToFloat64Array", "callScalarUDF", "runtime", "funcId", "descPtr", "descSize", "ptrsPtr", "ptrsSize", "udf", "rawDesc", "desc", "ptrs", "buildResolver", "arg", "_a", "validity", "raw", "strings", "stringLengths", "j", "subarray", "str", "row", "tmp", "children", "attr", "child", "resolver", "data", "argResolvers", "i", "resultDataLen", "resultDataPtr", "resultData", "resultValidityPtr", "resultValidity", "rawResultData", "args", "res", "resultLengthsPtr", "resultDataUTF8", "resultLengths", "totalLength", "utf8", "resultStringPtr", "resultStringBuf", "writerOffset", "resultUTF8", "retLen", "retPtr", "retBuffer", "e", "TextDecoderWrapper", "decoder", "data", "decodeText", "failWith", "mod", "msg", "readString", "mod", "begin", "length", "decodeText", "callSRet", "mod", "funcName", "argTypes", "args", "stackPointer", "response", "status", "data", "dataSize", "dropResponseBuffers", "BROWSER_RUNTIME", "mod", "fileId", "cached", "s", "d", "n", "callSRet", "infoStr", "readString", "dropResponseBuffers", "info", "file", "e", "_a", "_mod", "feature", "flags", "xhr", "getHTTPUrl", "addS3Headers", "data", "src", "result", "contentLength", "error", "contentLength2", "handle", "buffer", "failWith", "pathPtr", "pathLen", "path", "globalInfo", "xhr2", "_fileId", "newSize", "buf", "bytes", "location", "_b", "sliced", "out", "input", "fromPtr", "fromLen", "toPtr", "toLen", "from", "to", "key", "value", "_pathPtr", "_pathLen", "response", "funcId", "descPtr", "descSize", "ptrsPtr", "ptrsSize", "callScalarUDF", "func", "BROWSER_RUNTIME", "e", "m", "getModule", "instance", "DuckDB", "setModule", "key", "onmessage"]
}
